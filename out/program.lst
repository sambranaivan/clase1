
out/program.elf:     file format elf32-littlearm
out/program.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0013a5

Program Header:
0x70000001 off    0x0001202c vaddr 0x1a00202c paddr 0x1a00202c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010088 vaddr 0x10000088 paddr 0x10000088 align 2**16
         filesz 0x00000000 memsz 0x00000020 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002034 memsz 0x00002034 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002034 align 2**16
         filesz 0x00000084 memsz 0x00000084 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000202c  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  10000000  1a002034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020084  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
  6 .bss          00000020  10000088  10000088  00010088  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a00202c  1a00202c  0001202c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020084  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020084  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020084  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 17 .noinit       00000000  100000a8  100000a8  00020084  2**2
                  CONTENTS
 18 .debug_info   00016d77  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003aa5  00000000  00000000  00036dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00005945  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000007c0  00000000  00000000  000401e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000006f8  00000000  00000000  000409a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000a95f  00000000  00000000  0004109d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000b839  00000000  00000000  0004b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001c819  00000000  00000000  00057235  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  00073a4e  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  00073acd  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001204  00000000  00000000  00073b04  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000088 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00202c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000a8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 checkState.c
00000000 l    df *ABS*	00000000 obtenerDatos.c
00000000 l    df *ABS*	00000000 programa.c
00000000 l    df *ABS*	00000000 stateMachine.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0005ac l     F .text	000000a0 pll_calc_divs
1a00064c l     F .text	00000100 pll_get_frac
1a00074c l     F .text	0000004c Chip_Clock_FindBaseClock
1a0009c0 l     F .text	00000022 Chip_Clock_GetDivRate
10000088 l     O .bss	00000008 audio_usb_pll_freq
1a001db0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001e1c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0010a4 l     F .text	0000002c Chip_UART_GetIndex
1a001e64 l     O .text	00000008 UART_BClock
1a001e6c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 board.c
1a00124c l     F .text	00000044 Board_LED_Init
1a001e7c l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001e88 l     O .text	0000000c InitClkStates
1a001e94 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001520 l     F .text	00000034 gpioObtainPinConfig
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a001788 l     F .text	00000030 i2cHardwareConfig
1a0017b8 l     F .text	0000003c i2cHardwareRead
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0018c8 l     F .text	00000002 errorOcurred
1a0018ca l     F .text	00000002 doNothing
10000044 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a000300 l       .text	00000000 __CRP_WORD_END__
1a0002fc l       .text	00000000 __CRP_WORD_START__
1a0007e4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000f1a g     F .text	0000000e Chip_I2CM_Xfer
1a00194c g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a000b82 g     F .text	00000024 Chip_GPIO_SetDir
10000000 g     O .data	00000001 LEDCONTROL
1a00017a  w    F .text	00000002 HardFault_Handler
1a000bc8 g     F .text	00000122 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a0018a4 g     F .text	00000024 SysTick_Handler
1a001124 g     F .text	00000040 Chip_UART_SetBaud
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002034 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1a001802 g     F .text	00000028 i2cRead
53ff64ea g       *ABS*	00000000 __valid_user_code_checksum
1a002034 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a001990 g     F .text	00000044 TIMER3_IRQHandler
1a000a62 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a000d78 g     F .text	00000034 Chip_I2C_MasterStateHandler
1a001a84 g     F .text	00000000 .hidden __aeabi_uldivmod
100000a8 g       .noinit	00000000 _noinit
1a001a68 g     F .text	00000018 uartWriteString
10000090 g     O .bss	00000004 SystemCoreClock
1a0010d0 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000ae0 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
10000098 g     O .bss	00000008 tickCounter
1a00132c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000d48 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a001ab4 g     F .text	000002dc .hidden __udivmoddi4
1a001e74 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a00182c g     F .text	00000078 tickConfig
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a0003ec g     F .text	000001ac stateMachine
1a001554 g     F .text	00000174 gpioConfig
1a00202c g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a0012cc g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
100000a8 g       .bss	00000000 _ebss
1a0018cc g     F .text	00000040 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a000f28 g     F .text	00000024 Chip_I2CM_XferBlocking
1a000d10 g     F .text	00000038 Chip_I2C_SetClockRate
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a000798 g     F .text	0000004c Chip_Clock_EnableCrystal
1a00142c g     F .text	000000ee boardConfig
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a00190c g     F .text	00000040 TIMER1_IRQHandler
1a000cec g     F .text	00000024 Chip_I2C_Init
1a001a80 g     F .text	00000002 UART2_IRQHandler
1a000954 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00151a g     F .text	00000004 sAPI_NullFuncPtr
1a001a38 g     F .text	00000030 uartWriteByte
1a001772 g     F .text	00000016 gpioToggle
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a000a3c g     F .text	00000026 Chip_Clock_GetBaseClock
10000088 g       .bss	00000000 _bss
10000004 g     O .data	00000004 STATE
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a000b80 g     F .text	00000002 Chip_GPIO_Init
1a001e78 g     O .text	00000004 OscRateIn
100000a8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001d90  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a000dac g     F .text	00000018 Chip_I2C_IsStateChanged
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a000800 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a001d94 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000390 g     F .text	0000005c main
1a000340 g     F .text	00000030 obtenerDatos
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000a70 g     F .text	0000003c Chip_Clock_EnableOpts
1a001ef4 g     O .text	00000136 gpioPinsConfig
1a00081c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000b2c g     F .text	00000054 fpuInit
1a0008d4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0017f4 g     F .text	0000000e i2cConfig
1a001420 g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a000300 g     F .text	00000040 check_state
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0016c8 g     F .text	00000056 gpioWrite
1a0012f4 g     F .text	00000038 Board_SetupMuxing
1a001164 g     F .text	000000e8 Chip_UART_SetBaudFDR
100000a0 g     O .bss	00000008 tickRateMS
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000040 g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
1a000dfc g     F .text	0000011e Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
100000a8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000dc4 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0019d4 g     F .text	00000064 uartConfig
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a0012a4 g     F .text	00000028 Board_Debug_Init
10000084 g       .data	00000000 _edata
1a000ba8 g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000f4c g     F .text	00000158 Chip_SetupCoreClock
1a000370 g     F .text	00000020 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0013a4 g     F .text	0000007c ResetISR
1a000598 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001d90  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a000aac g     F .text	00000034 Chip_Clock_Enable
1a001a82 g     F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a00171e g     F .text	00000054 gpioRead
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a001290 g     F .text	00000014 Board_UART_Init
1a0009e4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a001398 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 a5 13 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a ea 64 ff 53     }............d.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	a5 18 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a cd 18 00 1a 0d 19 00 1a 4d 19 00 1a     ............M...
1a00007c:	91 19 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a bd 01 00 1a 8b 01 00 1a 81 1a 00 1a     ................
1a0000ac:	83 1a 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 71 03 00 1a 8b 01 00 1a 8b 01 00 1a     ....q...........
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002034 	.word	0x1a002034
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000084 	.word	0x00000084
1a000120:	1a002034 	.word	0x1a002034
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002034 	.word	0x1a002034
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002034 	.word	0x1a002034
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002034 	.word	0x1a002034
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000088 	.word	0x10000088
1a000154:	00000020 	.word	0x00000020
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr

1a0001bc <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a0001bc:	4770      	bx	lr
1a0001be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <check_state>:
#define PIN_1 GPIO0
#define PIN_2 GPIO2
#define PIN_3 GPIO4
/*==================[definiciones de funciones internas]=====================*/
int check_state(int p1,int p2, int p3)
{
1a000300:	b570      	push	{r4, r5, r6, lr}
1a000302:	4604      	mov	r4, r0
1a000304:	460e      	mov	r6, r1
1a000306:	4615      	mov	r5, r2
    
    if(gpioRead(PIN_1) == p1 & gpioRead(PIN_2) == p2 & gpioRead(PIN_3) == p3)
1a000308:	2020      	movs	r0, #32
1a00030a:	f001 fa08 	bl	1a00171e <gpioRead>
1a00030e:	42a0      	cmp	r0, r4
1a000310:	bf14      	ite	ne
1a000312:	2400      	movne	r4, #0
1a000314:	2401      	moveq	r4, #1
1a000316:	201f      	movs	r0, #31
1a000318:	f001 fa01 	bl	1a00171e <gpioRead>
1a00031c:	42b0      	cmp	r0, r6
1a00031e:	bf14      	ite	ne
1a000320:	2400      	movne	r4, #0
1a000322:	f004 0401 	andeq.w	r4, r4, #1
1a000326:	201e      	movs	r0, #30
1a000328:	f001 f9f9 	bl	1a00171e <gpioRead>
1a00032c:	42a8      	cmp	r0, r5
1a00032e:	bf14      	ite	ne
1a000330:	2000      	movne	r0, #0
1a000332:	2001      	moveq	r0, #1
1a000334:	b114      	cbz	r4, 1a00033c <check_state+0x3c>
1a000336:	b108      	cbz	r0, 1a00033c <check_state+0x3c>
    {
        return 1;
1a000338:	2001      	movs	r0, #1
1a00033a:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        return 0;
1a00033c:	2000      	movs	r0, #0
    }
}
1a00033e:	bd70      	pop	{r4, r5, r6, pc}

1a000340 <obtenerDatos>:
#include "obtenerDatos.h"
#include "sapi.h"

void obtenerDatos()
{
1a000340:	b530      	push	{r4, r5, lr}
1a000342:	b087      	sub	sp, #28
    uint8_t dataToReadBuffer;
    uint8_t Address;
    char xresult;
    char buff[10];
    int buffsize = 4;
   dataToReadBuffer = 0x00;
1a000344:	2400      	movs	r4, #0
1a000346:	aa06      	add	r2, sp, #24
1a000348:	f802 4d01 	strb.w	r4, [r2, #-1]!
    Address = 0x03;
    //Address = 0x00;
   i2cRead( I2C0, Address,
1a00034c:	2301      	movs	r3, #1
1a00034e:	9303      	str	r3, [sp, #12]
1a000350:	2104      	movs	r1, #4
1a000352:	9102      	str	r1, [sp, #8]
1a000354:	f10d 0516 	add.w	r5, sp, #22
1a000358:	9501      	str	r5, [sp, #4]
1a00035a:	9300      	str	r3, [sp, #0]
1a00035c:	2103      	movs	r1, #3
1a00035e:	4620      	mov	r0, r4
1a000360:	f001 fa4f 	bl	1a001802 <i2cRead>
            &dataToReadBuffer, 1, TRUE,
            &xresult, buffsize, TRUE );
    
    //itoa(xresult,buff,10);
    uartWriteString(UART_USB,&xresult);
1a000364:	4629      	mov	r1, r5
1a000366:	4620      	mov	r0, r4
1a000368:	f001 fb7e 	bl	1a001a68 <uartWriteString>
    //uartWriteString(UART_USB,buff);

1a00036c:	b007      	add	sp, #28
1a00036e:	bd30      	pop	{r4, r5, pc}

1a000370 <GPIO0_IRQHandler>:

/*==================[funcion principal]======================================*/

// Handle interrupt from GPIO pin or GPIO pin mapped to PININT
void PININT_IRQ_HANDLER(void)
{
1a000370:	b508      	push	{r3, lr}
 * @param  pins    : Pin interrupts to clear (ORed value of PININTCH*)
 * @return Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
   pPININT->IST = pins;
1a000372:	2201      	movs	r2, #1
1a000374:	4b04      	ldr	r3, [pc, #16]	; (1a000388 <GPIO0_IRQHandler+0x18>)
1a000376:	625a      	str	r2, [r3, #36]	; 0x24
   Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH(PININT_INDEX) );
    stateMachine();
1a000378:	f000 f838 	bl	1a0003ec <stateMachine>
   gpioToggle(LEDCONTROL);//LEd de conntrol de interrupciones 
1a00037c:	4b03      	ldr	r3, [pc, #12]	; (1a00038c <GPIO0_IRQHandler+0x1c>)
1a00037e:	7818      	ldrb	r0, [r3, #0]
1a000380:	f001 f9f7 	bl	1a001772 <gpioToggle>
1a000384:	bd08      	pop	{r3, pc}
1a000386:	bf00      	nop
1a000388:	40087000 	.word	0x40087000
1a00038c:	10000000 	.word	0x10000000

1a000390 <main>:
}

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void ){
1a000390:	b508      	push	{r3, lr}
    
    
   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();   
1a000392:	f001 f84b 	bl	1a00142c <boardConfig>
   
   /* Configuración de GPIO0 de la EDU-CIAA-NXP como entrada con pull-up */
   gpioConfig( GPIO0, GPIO_INPUT_PULLUP );
1a000396:	2102      	movs	r1, #2
1a000398:	2020      	movs	r0, #32
1a00039a:	f001 f8db 	bl	1a001554 <gpioConfig>
    
   i2cConfig( I2C0, 100000 );
1a00039e:	4910      	ldr	r1, [pc, #64]	; (1a0003e0 <main+0x50>)
1a0003a0:	2000      	movs	r0, #0
1a0003a2:	f001 fa27 	bl	1a0017f4 <i2cConfig>
   uartConfig( UART_USB, 115200 );
1a0003a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0003aa:	2000      	movs	r0, #0
1a0003ac:	f001 fb12 	bl	1a0019d4 <uartConfig>
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
   int32_t of = (PortSel & 3) << 3;
   uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
   LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a0003b0:	4a0c      	ldr	r2, [pc, #48]	; (1a0003e4 <main+0x54>)
1a0003b2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
1a0003b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0003ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
1a0003be:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
1a0003c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a0003c6:	2301      	movs	r3, #1
1a0003c8:	6253      	str	r3, [r2, #36]	; 0x24
   pPININT->ISEL &= ~pins;
1a0003ca:	6811      	ldr	r1, [r2, #0]
1a0003cc:	f021 0101 	bic.w	r1, r1, #1
1a0003d0:	6011      	str	r1, [r2, #0]
   pPININT->SIENF = pins;
1a0003d2:	6153      	str	r3, [r2, #20]
   pPININT->SIENR = pins;
1a0003d4:	6093      	str	r3, [r2, #8]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1a0003d6:	4a04      	ldr	r2, [pc, #16]	; (1a0003e8 <main+0x58>)
1a0003d8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a0003dc:	6053      	str	r3, [r2, #4]
1a0003de:	e7fe      	b.n	1a0003de <main+0x4e>
1a0003e0:	000186a0 	.word	0x000186a0
1a0003e4:	40086000 	.word	0x40086000
1a0003e8:	e000e100 	.word	0xe000e100

1a0003ec <stateMachine>:
#include "sapi.h"
/*==================[Maquina de Estados]====================*/
int STATE = 12;
gpioMap_t LEDCONTROL = LEDB;
void stateMachine()
{
1a0003ec:	b508      	push	{r3, lr}
    
  switch (STATE)
1a0003ee:	4b68      	ldr	r3, [pc, #416]	; (1a000590 <stateMachine+0x1a4>)
1a0003f0:	681b      	ldr	r3, [r3, #0]
1a0003f2:	2b0d      	cmp	r3, #13
1a0003f4:	f200 80ca 	bhi.w	1a00058c <stateMachine+0x1a0>
1a0003f8:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0003fc:	001c000e 	.word	0x001c000e
1a000400:	0038002a 	.word	0x0038002a
1a000404:	00540046 	.word	0x00540046
1a000408:	00700062 	.word	0x00700062
1a00040c:	008c007e 	.word	0x008c007e
1a000410:	00a8009a 	.word	0x00a8009a
1a000414:	00c500b8 	.word	0x00c500b8
  	{
  		case 0:
  			if(check_state(1,0,0)){
1a000418:	2200      	movs	r2, #0
1a00041a:	4611      	mov	r1, r2
1a00041c:	2001      	movs	r0, #1
1a00041e:	f7ff ff6f 	bl	1a000300 <check_state>
1a000422:	b118      	cbz	r0, 1a00042c <stateMachine+0x40>
  				STATE = 1;
1a000424:	2201      	movs	r2, #1
1a000426:	4b5a      	ldr	r3, [pc, #360]	; (1a000590 <stateMachine+0x1a4>)
1a000428:	601a      	str	r2, [r3, #0]
1a00042a:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a00042c:	220d      	movs	r2, #13
1a00042e:	4b58      	ldr	r3, [pc, #352]	; (1a000590 <stateMachine+0x1a4>)
1a000430:	601a      	str	r2, [r3, #0]
1a000432:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 1:
  			if(check_state (0,0,0)){
1a000434:	2200      	movs	r2, #0
1a000436:	4611      	mov	r1, r2
1a000438:	4610      	mov	r0, r2
1a00043a:	f7ff ff61 	bl	1a000300 <check_state>
1a00043e:	b118      	cbz	r0, 1a000448 <stateMachine+0x5c>
  				STATE = 2;
1a000440:	2202      	movs	r2, #2
1a000442:	4b53      	ldr	r3, [pc, #332]	; (1a000590 <stateMachine+0x1a4>)
1a000444:	601a      	str	r2, [r3, #0]
1a000446:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a000448:	220d      	movs	r2, #13
1a00044a:	4b51      	ldr	r3, [pc, #324]	; (1a000590 <stateMachine+0x1a4>)
1a00044c:	601a      	str	r2, [r3, #0]
1a00044e:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 2:
  			if(check_state(1,1,0)){
1a000450:	2200      	movs	r2, #0
1a000452:	2101      	movs	r1, #1
1a000454:	4608      	mov	r0, r1
1a000456:	f7ff ff53 	bl	1a000300 <check_state>
1a00045a:	b118      	cbz	r0, 1a000464 <stateMachine+0x78>
  				STATE = 3;
1a00045c:	2203      	movs	r2, #3
1a00045e:	4b4c      	ldr	r3, [pc, #304]	; (1a000590 <stateMachine+0x1a4>)
1a000460:	601a      	str	r2, [r3, #0]
1a000462:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a000464:	220d      	movs	r2, #13
1a000466:	4b4a      	ldr	r3, [pc, #296]	; (1a000590 <stateMachine+0x1a4>)
1a000468:	601a      	str	r2, [r3, #0]
1a00046a:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 3:
  			if(check_state(0,1,0)){
1a00046c:	2200      	movs	r2, #0
1a00046e:	2101      	movs	r1, #1
1a000470:	4610      	mov	r0, r2
1a000472:	f7ff ff45 	bl	1a000300 <check_state>
1a000476:	b118      	cbz	r0, 1a000480 <stateMachine+0x94>
  				STATE = 4;
1a000478:	2204      	movs	r2, #4
1a00047a:	4b45      	ldr	r3, [pc, #276]	; (1a000590 <stateMachine+0x1a4>)
1a00047c:	601a      	str	r2, [r3, #0]
1a00047e:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a000480:	220d      	movs	r2, #13
1a000482:	4b43      	ldr	r3, [pc, #268]	; (1a000590 <stateMachine+0x1a4>)
1a000484:	601a      	str	r2, [r3, #0]
1a000486:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 4:
  			if(check_state(1,0,0)){
1a000488:	2200      	movs	r2, #0
1a00048a:	4611      	mov	r1, r2
1a00048c:	2001      	movs	r0, #1
1a00048e:	f7ff ff37 	bl	1a000300 <check_state>
1a000492:	b118      	cbz	r0, 1a00049c <stateMachine+0xb0>
  				STATE = 5;
1a000494:	2205      	movs	r2, #5
1a000496:	4b3e      	ldr	r3, [pc, #248]	; (1a000590 <stateMachine+0x1a4>)
1a000498:	601a      	str	r2, [r3, #0]
1a00049a:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a00049c:	220d      	movs	r2, #13
1a00049e:	4b3c      	ldr	r3, [pc, #240]	; (1a000590 <stateMachine+0x1a4>)
1a0004a0:	601a      	str	r2, [r3, #0]
1a0004a2:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 5:
  			if(check_state(0,0,0)){
1a0004a4:	2200      	movs	r2, #0
1a0004a6:	4611      	mov	r1, r2
1a0004a8:	4610      	mov	r0, r2
1a0004aa:	f7ff ff29 	bl	1a000300 <check_state>
1a0004ae:	b118      	cbz	r0, 1a0004b8 <stateMachine+0xcc>
  				STATE = 6;
1a0004b0:	2206      	movs	r2, #6
1a0004b2:	4b37      	ldr	r3, [pc, #220]	; (1a000590 <stateMachine+0x1a4>)
1a0004b4:	601a      	str	r2, [r3, #0]
1a0004b6:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a0004b8:	220d      	movs	r2, #13
1a0004ba:	4b35      	ldr	r3, [pc, #212]	; (1a000590 <stateMachine+0x1a4>)
1a0004bc:	601a      	str	r2, [r3, #0]
1a0004be:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 6:
  			if(check_state(1,0,0)){
1a0004c0:	2200      	movs	r2, #0
1a0004c2:	4611      	mov	r1, r2
1a0004c4:	2001      	movs	r0, #1
1a0004c6:	f7ff ff1b 	bl	1a000300 <check_state>
1a0004ca:	b118      	cbz	r0, 1a0004d4 <stateMachine+0xe8>
  				STATE = 7;
1a0004cc:	2207      	movs	r2, #7
1a0004ce:	4b30      	ldr	r3, [pc, #192]	; (1a000590 <stateMachine+0x1a4>)
1a0004d0:	601a      	str	r2, [r3, #0]
1a0004d2:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a0004d4:	220d      	movs	r2, #13
1a0004d6:	4b2e      	ldr	r3, [pc, #184]	; (1a000590 <stateMachine+0x1a4>)
1a0004d8:	601a      	str	r2, [r3, #0]
1a0004da:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 7:
  			if(check_state(0,0,0)){
1a0004dc:	2200      	movs	r2, #0
1a0004de:	4611      	mov	r1, r2
1a0004e0:	4610      	mov	r0, r2
1a0004e2:	f7ff ff0d 	bl	1a000300 <check_state>
1a0004e6:	b118      	cbz	r0, 1a0004f0 <stateMachine+0x104>
  				STATE = 8;
1a0004e8:	2208      	movs	r2, #8
1a0004ea:	4b29      	ldr	r3, [pc, #164]	; (1a000590 <stateMachine+0x1a4>)
1a0004ec:	601a      	str	r2, [r3, #0]
1a0004ee:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a0004f0:	220d      	movs	r2, #13
1a0004f2:	4b27      	ldr	r3, [pc, #156]	; (1a000590 <stateMachine+0x1a4>)
1a0004f4:	601a      	str	r2, [r3, #0]
1a0004f6:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 8:
  			if(check_state(1,0,0)){
1a0004f8:	2200      	movs	r2, #0
1a0004fa:	4611      	mov	r1, r2
1a0004fc:	2001      	movs	r0, #1
1a0004fe:	f7ff feff 	bl	1a000300 <check_state>
1a000502:	b118      	cbz	r0, 1a00050c <stateMachine+0x120>
  				STATE = 9;
1a000504:	2209      	movs	r2, #9
1a000506:	4b22      	ldr	r3, [pc, #136]	; (1a000590 <stateMachine+0x1a4>)
1a000508:	601a      	str	r2, [r3, #0]
1a00050a:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a00050c:	220d      	movs	r2, #13
1a00050e:	4b20      	ldr	r3, [pc, #128]	; (1a000590 <stateMachine+0x1a4>)
1a000510:	601a      	str	r2, [r3, #0]
1a000512:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 9:
  			if(check_state(0,0,0)){
1a000514:	2200      	movs	r2, #0
1a000516:	4611      	mov	r1, r2
1a000518:	4610      	mov	r0, r2
1a00051a:	f7ff fef1 	bl	1a000300 <check_state>
1a00051e:	b118      	cbz	r0, 1a000528 <stateMachine+0x13c>
  				STATE = 10;
1a000520:	220a      	movs	r2, #10
1a000522:	4b1b      	ldr	r3, [pc, #108]	; (1a000590 <stateMachine+0x1a4>)
1a000524:	601a      	str	r2, [r3, #0]
1a000526:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a000528:	220d      	movs	r2, #13
1a00052a:	4b19      	ldr	r3, [pc, #100]	; (1a000590 <stateMachine+0x1a4>)
1a00052c:	601a      	str	r2, [r3, #0]
1a00052e:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 10:
  			if(check_state(1,0,1)){
1a000530:	2201      	movs	r2, #1
1a000532:	2100      	movs	r1, #0
1a000534:	4610      	mov	r0, r2
1a000536:	f7ff fee3 	bl	1a000300 <check_state>
1a00053a:	b118      	cbz	r0, 1a000544 <stateMachine+0x158>
  				STATE = 11;
1a00053c:	220b      	movs	r2, #11
1a00053e:	4b14      	ldr	r3, [pc, #80]	; (1a000590 <stateMachine+0x1a4>)
1a000540:	601a      	str	r2, [r3, #0]
1a000542:	bd08      	pop	{r3, pc}
  			}
        else
          {
            STATE = 13;
1a000544:	220d      	movs	r2, #13
1a000546:	4b12      	ldr	r3, [pc, #72]	; (1a000590 <stateMachine+0x1a4>)
1a000548:	601a      	str	r2, [r3, #0]
1a00054a:	bd08      	pop	{r3, pc}
          }
  		break;
  		case 11:
  			if(check_state(0,0,1)){
1a00054c:	2201      	movs	r2, #1
1a00054e:	2100      	movs	r1, #0
1a000550:	4608      	mov	r0, r1
1a000552:	f7ff fed5 	bl	1a000300 <check_state>
1a000556:	b918      	cbnz	r0, 1a000560 <stateMachine+0x174>
  				STATE = 0;
                obtenerDatos();
  			}
        else
          {
            STATE = 13;
1a000558:	220d      	movs	r2, #13
1a00055a:	4b0d      	ldr	r3, [pc, #52]	; (1a000590 <stateMachine+0x1a4>)
1a00055c:	601a      	str	r2, [r3, #0]
1a00055e:	bd08      	pop	{r3, pc}
  				STATE = 0;
1a000560:	2200      	movs	r2, #0
1a000562:	4b0b      	ldr	r3, [pc, #44]	; (1a000590 <stateMachine+0x1a4>)
1a000564:	601a      	str	r2, [r3, #0]
                obtenerDatos();
1a000566:	f7ff feeb 	bl	1a000340 <obtenerDatos>
1a00056a:	bd08      	pop	{r3, pc}
          }
  		break;
      case 12:
          if(check_state(0,0,1))
1a00056c:	2201      	movs	r2, #1
1a00056e:	2100      	movs	r1, #0
1a000570:	4608      	mov	r0, r1
1a000572:	f7ff fec5 	bl	1a000300 <check_state>
1a000576:	b148      	cbz	r0, 1a00058c <stateMachine+0x1a0>
          {

              // gpioWrite(LEDB,OFF);
              // gpioWrite(LEDG,!gpioRead(PIN_1));
              LEDCONTROL = LEDG;
1a000578:	2229      	movs	r2, #41	; 0x29
1a00057a:	4b06      	ldr	r3, [pc, #24]	; (1a000594 <stateMachine+0x1a8>)
1a00057c:	701a      	strb	r2, [r3, #0]
            //SEÑAL SINCRONIZADA IR AL ESTADO INICIAL
              
              STATE = 0;
1a00057e:	2200      	movs	r2, #0
1a000580:	4b03      	ldr	r3, [pc, #12]	; (1a000590 <stateMachine+0x1a4>)
1a000582:	601a      	str	r2, [r3, #0]
1a000584:	bd08      	pop	{r3, pc}
      break;
         case 13:
              // gpioWrite(LEDG,OFF);
              // gpioWrite(LEDR,!gpioRead(PIN_1));
              //ESTADO DE ERROR 
              LEDCONTROL = LEDR;
1a000586:	2228      	movs	r2, #40	; 0x28
1a000588:	4b02      	ldr	r3, [pc, #8]	; (1a000594 <stateMachine+0x1a8>)
1a00058a:	701a      	strb	r2, [r3, #0]
1a00058c:	bd08      	pop	{r3, pc}
1a00058e:	bf00      	nop
1a000590:	10000004 	.word	0x10000004
1a000594:	10000000 	.word	0x10000000

1a000598 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000598:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00059a:	2069      	movs	r0, #105	; 0x69
1a00059c:	f000 faa0 	bl	1a000ae0 <Chip_Clock_GetRate>
1a0005a0:	4b01      	ldr	r3, [pc, #4]	; (1a0005a8 <SystemCoreClockUpdate+0x10>)
1a0005a2:	6018      	str	r0, [r3, #0]
1a0005a4:	bd08      	pop	{r3, pc}
1a0005a6:	bf00      	nop
1a0005a8:	10000090 	.word	0x10000090

1a0005ac <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0005ac:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a0005ae:	680b      	ldr	r3, [r1, #0]
1a0005b0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0005b4:	d002      	beq.n	1a0005bc <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a0005b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0005ba:	600b      	str	r3, [r1, #0]
1a0005bc:	4607      	mov	r7, r0
1a0005be:	2501      	movs	r5, #1
1a0005c0:	e03b      	b.n	1a00063a <pll_calc_divs+0x8e>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a0005c2:	694b      	ldr	r3, [r1, #20]
1a0005c4:	fb03 f302 	mul.w	r3, r3, r2
1a0005c8:	fbb3 f3f5 	udiv	r3, r3, r5
1a0005cc:	e014      	b.n	1a0005f8 <pll_calc_divs+0x4c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a0005ce:	461c      	mov	r4, r3
1a0005d0:	e020      	b.n	1a000614 <pll_calc_divs+0x68>
       return -val;
1a0005d2:	f1ce 0e00 	rsb	lr, lr, #0
1a0005d6:	e020      	b.n	1a00061a <pll_calc_divs+0x6e>
           for (m = 1; m <= 256; m++) {
1a0005d8:	3201      	adds	r2, #1
1a0005da:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0005de:	dc26      	bgt.n	1a00062e <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 6)) {
1a0005e0:	680c      	ldr	r4, [r1, #0]
1a0005e2:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0005e6:	d0ec      	beq.n	1a0005c2 <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0005e8:	1c73      	adds	r3, r6, #1
1a0005ea:	fa02 fe03 	lsl.w	lr, r2, r3
1a0005ee:	694b      	ldr	r3, [r1, #20]
1a0005f0:	fb03 f30e 	mul.w	r3, r3, lr
1a0005f4:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0005f8:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a000644 <pll_calc_divs+0x98>
1a0005fc:	4573      	cmp	r3, lr
1a0005fe:	d9eb      	bls.n	1a0005d8 <pll_calc_divs+0x2c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000600:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a000648 <pll_calc_divs+0x9c>
1a000604:	4573      	cmp	r3, lr
1a000606:	d812      	bhi.n	1a00062e <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 7)) {
1a000608:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00060c:	d1df      	bne.n	1a0005ce <pll_calc_divs+0x22>
               } else {
                   fout = fcco >> (p + 1);
1a00060e:	1c74      	adds	r4, r6, #1
1a000610:	fa23 f404 	lsr.w	r4, r3, r4
   if (val < 0)
1a000614:	ebb0 0e04 	subs.w	lr, r0, r4
1a000618:	d4db      	bmi.n	1a0005d2 <pll_calc_divs+0x26>
               }

               if (ABS(freq - fout) < prev) {
1a00061a:	4577      	cmp	r7, lr
1a00061c:	d9dc      	bls.n	1a0005d8 <pll_calc_divs+0x2c>
                   ppll->nsel = n;
1a00061e:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a000620:	1c77      	adds	r7, r6, #1
1a000622:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a000624:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a000626:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a000628:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a00062a:	4677      	mov	r7, lr
1a00062c:	e7d4      	b.n	1a0005d8 <pll_calc_divs+0x2c>
       for (p = 0; p < 4; p ++) {
1a00062e:	3601      	adds	r6, #1
1a000630:	2e03      	cmp	r6, #3
1a000632:	dc01      	bgt.n	1a000638 <pll_calc_divs+0x8c>
1a000634:	2201      	movs	r2, #1
1a000636:	e7d0      	b.n	1a0005da <pll_calc_divs+0x2e>
   for (n = 1; n <= 4; n++) {
1a000638:	3501      	adds	r5, #1
1a00063a:	2d04      	cmp	r5, #4
1a00063c:	dc01      	bgt.n	1a000642 <pll_calc_divs+0x96>
1a00063e:	2600      	movs	r6, #0
1a000640:	e7f6      	b.n	1a000630 <pll_calc_divs+0x84>
               }
           }
       }
   }
}
1a000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000644:	094c5eff 	.word	0x094c5eff
1a000648:	1312d000 	.word	0x1312d000

1a00064c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00064c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00064e:	b099      	sub	sp, #100	; 0x64
1a000650:	4605      	mov	r5, r0
1a000652:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000654:	2260      	movs	r2, #96	; 0x60
1a000656:	2100      	movs	r1, #0
1a000658:	4668      	mov	r0, sp
1a00065a:	f001 fb9b 	bl	1a001d94 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00065e:	2380      	movs	r3, #128	; 0x80
1a000660:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a000662:	6963      	ldr	r3, [r4, #20]
1a000664:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000666:	7923      	ldrb	r3, [r4, #4]
1a000668:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a00066c:	4669      	mov	r1, sp
1a00066e:	4628      	mov	r0, r5
1a000670:	f7ff ff9c 	bl	1a0005ac <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000674:	9b06      	ldr	r3, [sp, #24]
1a000676:	429d      	cmp	r5, r3
1a000678:	d02f      	beq.n	1a0006da <pll_get_frac+0x8e>
   if (val < 0)
1a00067a:	1aeb      	subs	r3, r5, r3
1a00067c:	d436      	bmi.n	1a0006ec <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a00067e:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000680:	2340      	movs	r3, #64	; 0x40
1a000682:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a000684:	6963      	ldr	r3, [r4, #20]
1a000686:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a000688:	7923      	ldrb	r3, [r4, #4]
1a00068a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a00068e:	a910      	add	r1, sp, #64	; 0x40
1a000690:	4628      	mov	r0, r5
1a000692:	f7ff ff8b 	bl	1a0005ac <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000696:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000698:	429d      	cmp	r5, r3
1a00069a:	d029      	beq.n	1a0006f0 <pll_get_frac+0xa4>
   if (val < 0)
1a00069c:	1aeb      	subs	r3, r5, r3
1a00069e:	d42f      	bmi.n	1a000700 <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a0006a0:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a0006a2:	2340      	movs	r3, #64	; 0x40
1a0006a4:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a0006a6:	6963      	ldr	r3, [r4, #20]
1a0006a8:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a0006aa:	7923      	ldrb	r3, [r4, #4]
1a0006ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a0006b0:	a908      	add	r1, sp, #32
1a0006b2:	4628      	mov	r0, r5
1a0006b4:	f7ff ff7a 	bl	1a0005ac <pll_calc_divs>
   if (pll[1].fout == freq) {
1a0006b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0006ba:	429d      	cmp	r5, r3
1a0006bc:	d022      	beq.n	1a000704 <pll_get_frac+0xb8>
   if (val < 0)
1a0006be:	1aed      	subs	r5, r5, r3
1a0006c0:	d428      	bmi.n	1a000714 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a0006c2:	42ae      	cmp	r6, r5
1a0006c4:	dc30      	bgt.n	1a000728 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a0006c6:	42be      	cmp	r6, r7
1a0006c8:	dc26      	bgt.n	1a000718 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a0006ca:	466d      	mov	r5, sp
1a0006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0006d8:	e006      	b.n	1a0006e8 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a0006da:	466d      	mov	r5, sp
1a0006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a0006e8:	b019      	add	sp, #100	; 0x64
1a0006ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a0006ec:	425b      	negs	r3, r3
1a0006ee:	e7c6      	b.n	1a00067e <pll_get_frac+0x32>
       *ppll = pll[2];
1a0006f0:	ad10      	add	r5, sp, #64	; 0x40
1a0006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0006f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0006fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0006fe:	e7f3      	b.n	1a0006e8 <pll_get_frac+0x9c>
       return -val;
1a000700:	425b      	negs	r3, r3
1a000702:	e7cd      	b.n	1a0006a0 <pll_get_frac+0x54>
       *ppll = pll[1];
1a000704:	ad08      	add	r5, sp, #32
1a000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00070a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00070e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000712:	e7e9      	b.n	1a0006e8 <pll_get_frac+0x9c>
       return -val;
1a000714:	426d      	negs	r5, r5
1a000716:	e7d4      	b.n	1a0006c2 <pll_get_frac+0x76>
           *ppll = pll[2];
1a000718:	ad10      	add	r5, sp, #64	; 0x40
1a00071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00071e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000726:	e7df      	b.n	1a0006e8 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a000728:	42af      	cmp	r7, r5
1a00072a:	db07      	blt.n	1a00073c <pll_get_frac+0xf0>
           *ppll = pll[1];
1a00072c:	ad08      	add	r5, sp, #32
1a00072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000732:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00073a:	e7d5      	b.n	1a0006e8 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a00073c:	ad10      	add	r5, sp, #64	; 0x40
1a00073e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000742:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00074a:	e7cd      	b.n	1a0006e8 <pll_get_frac+0x9c>

1a00074c <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00074c:	b430      	push	{r4, r5}
1a00074e:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a000750:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000752:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000754:	e000      	b.n	1a000758 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a000756:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000758:	281c      	cmp	r0, #28
1a00075a:	d118      	bne.n	1a00078e <Chip_Clock_FindBaseClock+0x42>
1a00075c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000760:	0051      	lsls	r1, r2, #1
1a000762:	4a0c      	ldr	r2, [pc, #48]	; (1a000794 <Chip_Clock_FindBaseClock+0x48>)
1a000764:	440a      	add	r2, r1
1a000766:	7914      	ldrb	r4, [r2, #4]
1a000768:	42a0      	cmp	r0, r4
1a00076a:	d010      	beq.n	1a00078e <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00076c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000770:	004a      	lsls	r2, r1, #1
1a000772:	4908      	ldr	r1, [pc, #32]	; (1a000794 <Chip_Clock_FindBaseClock+0x48>)
1a000774:	5a8a      	ldrh	r2, [r1, r2]
1a000776:	42aa      	cmp	r2, r5
1a000778:	d8ed      	bhi.n	1a000756 <Chip_Clock_FindBaseClock+0xa>
1a00077a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00077e:	0051      	lsls	r1, r2, #1
1a000780:	4a04      	ldr	r2, [pc, #16]	; (1a000794 <Chip_Clock_FindBaseClock+0x48>)
1a000782:	440a      	add	r2, r1
1a000784:	8852      	ldrh	r2, [r2, #2]
1a000786:	4295      	cmp	r5, r2
1a000788:	d8e5      	bhi.n	1a000756 <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a00078a:	4620      	mov	r0, r4
1a00078c:	e7e4      	b.n	1a000758 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a00078e:	bc30      	pop	{r4, r5}
1a000790:	4770      	bx	lr
1a000792:	bf00      	nop
1a000794:	1a001db0 	.word	0x1a001db0

1a000798 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000798:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a00079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00079e:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0007a0:	4a0d      	ldr	r2, [pc, #52]	; (1a0007d8 <Chip_Clock_EnableCrystal+0x40>)
1a0007a2:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a0007a4:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0007a8:	6992      	ldr	r2, [r2, #24]
1a0007aa:	4291      	cmp	r1, r2
1a0007ac:	d001      	beq.n	1a0007b2 <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0007ae:	4a0a      	ldr	r2, [pc, #40]	; (1a0007d8 <Chip_Clock_EnableCrystal+0x40>)
1a0007b0:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a0007b2:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a0007b6:	4a09      	ldr	r2, [pc, #36]	; (1a0007dc <Chip_Clock_EnableCrystal+0x44>)
1a0007b8:	6811      	ldr	r1, [r2, #0]
1a0007ba:	4a09      	ldr	r2, [pc, #36]	; (1a0007e0 <Chip_Clock_EnableCrystal+0x48>)
1a0007bc:	4291      	cmp	r1, r2
1a0007be:	d901      	bls.n	1a0007c4 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a0007c0:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0007c4:	4a04      	ldr	r2, [pc, #16]	; (1a0007d8 <Chip_Clock_EnableCrystal+0x40>)
1a0007c6:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a0007c8:	9b01      	ldr	r3, [sp, #4]
1a0007ca:	1e5a      	subs	r2, r3, #1
1a0007cc:	9201      	str	r2, [sp, #4]
1a0007ce:	2b00      	cmp	r3, #0
1a0007d0:	d1fa      	bne.n	1a0007c8 <Chip_Clock_EnableCrystal+0x30>
}
1a0007d2:	b002      	add	sp, #8
1a0007d4:	4770      	bx	lr
1a0007d6:	bf00      	nop
1a0007d8:	40050000 	.word	0x40050000
1a0007dc:	1a001e78 	.word	0x1a001e78
1a0007e0:	01312cff 	.word	0x01312cff

1a0007e4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0007e4:	3012      	adds	r0, #18
1a0007e6:	4b05      	ldr	r3, [pc, #20]	; (1a0007fc <Chip_Clock_GetDividerSource+0x18>)
1a0007e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a0007ec:	f010 0f01 	tst.w	r0, #1
1a0007f0:	d001      	beq.n	1a0007f6 <Chip_Clock_GetDividerSource+0x12>
       return CLKINPUT_PD;
1a0007f2:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0007f4:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0007f6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0007fa:	4770      	bx	lr
1a0007fc:	40050000 	.word	0x40050000

1a000800 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000800:	f100 0212 	add.w	r2, r0, #18
1a000804:	4b03      	ldr	r3, [pc, #12]	; (1a000814 <Chip_Clock_GetDividerDivisor+0x14>)
1a000806:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00080a:	4b03      	ldr	r3, [pc, #12]	; (1a000818 <Chip_Clock_GetDividerDivisor+0x18>)
1a00080c:	5c18      	ldrb	r0, [r3, r0]
}
1a00080e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000812:	4770      	bx	lr
1a000814:	40050000 	.word	0x40050000
1a000818:	1a001da8 	.word	0x1a001da8

1a00081c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00081c:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a00081e:	2810      	cmp	r0, #16
1a000820:	d80a      	bhi.n	1a000838 <Chip_Clock_GetClockInputHz+0x1c>
1a000822:	e8df f000 	tbb	[pc, r0]
1a000826:	0b44      	.short	0x0b44
1a000828:	0921180d 	.word	0x0921180d
1a00082c:	2d2a2724 	.word	0x2d2a2724
1a000830:	34300909 	.word	0x34300909
1a000834:	3c38      	.short	0x3c38
1a000836:	40          	.byte	0x40
1a000837:	00          	.byte	0x00
   uint32_t rate = 0;
1a000838:	2000      	movs	r0, #0
1a00083a:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a00083c:	481e      	ldr	r0, [pc, #120]	; (1a0008b8 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a00083e:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000840:	4b1e      	ldr	r3, [pc, #120]	; (1a0008bc <Chip_Clock_GetClockInputHz+0xa0>)
1a000842:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000846:	f003 0307 	and.w	r3, r3, #7
1a00084a:	2b04      	cmp	r3, #4
1a00084c:	d001      	beq.n	1a000852 <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a00084e:	481c      	ldr	r0, [pc, #112]	; (1a0008c0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000850:	bd08      	pop	{r3, pc}
   uint32_t rate = 0;
1a000852:	2000      	movs	r0, #0
1a000854:	bd08      	pop	{r3, pc}
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000856:	4b19      	ldr	r3, [pc, #100]	; (1a0008bc <Chip_Clock_GetClockInputHz+0xa0>)
1a000858:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00085c:	f003 0307 	and.w	r3, r3, #7
1a000860:	2b04      	cmp	r3, #4
1a000862:	d027      	beq.n	1a0008b4 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000864:	4816      	ldr	r0, [pc, #88]	; (1a0008c0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000866:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a000868:	4b16      	ldr	r3, [pc, #88]	; (1a0008c4 <Chip_Clock_GetClockInputHz+0xa8>)
1a00086a:	6818      	ldr	r0, [r3, #0]
       break;
1a00086c:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a00086e:	4b16      	ldr	r3, [pc, #88]	; (1a0008c8 <Chip_Clock_GetClockInputHz+0xac>)
1a000870:	6818      	ldr	r0, [r3, #0]
       break;
1a000872:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000874:	4b15      	ldr	r3, [pc, #84]	; (1a0008cc <Chip_Clock_GetClockInputHz+0xb0>)
1a000876:	6818      	ldr	r0, [r3, #0]
       break;
1a000878:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00087a:	4b14      	ldr	r3, [pc, #80]	; (1a0008cc <Chip_Clock_GetClockInputHz+0xb0>)
1a00087c:	6858      	ldr	r0, [r3, #4]
       break;
1a00087e:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000880:	f000 f868 	bl	1a000954 <Chip_Clock_GetMainPLLHz>
       break;
1a000884:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000886:	2100      	movs	r1, #0
1a000888:	f000 f89a 	bl	1a0009c0 <Chip_Clock_GetDivRate>
       break;
1a00088c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00088e:	2101      	movs	r1, #1
1a000890:	f000 f896 	bl	1a0009c0 <Chip_Clock_GetDivRate>
       break;
1a000894:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000896:	2102      	movs	r1, #2
1a000898:	f000 f892 	bl	1a0009c0 <Chip_Clock_GetDivRate>
       break;
1a00089c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00089e:	2103      	movs	r1, #3
1a0008a0:	f000 f88e 	bl	1a0009c0 <Chip_Clock_GetDivRate>
       break;
1a0008a4:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0008a6:	2104      	movs	r1, #4
1a0008a8:	f000 f88a 	bl	1a0009c0 <Chip_Clock_GetDivRate>
       break;
1a0008ac:	bd08      	pop	{r3, pc}
       rate = CRYSTAL_32K_FREQ_IN;
1a0008ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0008b2:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a0008b4:	4806      	ldr	r0, [pc, #24]	; (1a0008d0 <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a0008b6:	bd08      	pop	{r3, pc}
1a0008b8:	00b71b00 	.word	0x00b71b00
1a0008bc:	40043000 	.word	0x40043000
1a0008c0:	017d7840 	.word	0x017d7840
1a0008c4:	1a001e74 	.word	0x1a001e74
1a0008c8:	1a001e78 	.word	0x1a001e78
1a0008cc:	10000088 	.word	0x10000088
1a0008d0:	02faf080 	.word	0x02faf080

1a0008d4 <Chip_Clock_CalcMainPLLValue>:
{
1a0008d4:	b538      	push	{r3, r4, r5, lr}
1a0008d6:	4605      	mov	r5, r0
1a0008d8:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0008da:	7908      	ldrb	r0, [r1, #4]
1a0008dc:	f7ff ff9e 	bl	1a00081c <Chip_Clock_GetClockInputHz>
1a0008e0:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0008e2:	4b19      	ldr	r3, [pc, #100]	; (1a000948 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0008e4:	442b      	add	r3, r5
1a0008e6:	4a19      	ldr	r2, [pc, #100]	; (1a00094c <Chip_Clock_CalcMainPLLValue+0x78>)
1a0008e8:	4293      	cmp	r3, r2
1a0008ea:	d821      	bhi.n	1a000930 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0008ec:	b318      	cbz	r0, 1a000936 <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0008ee:	2380      	movs	r3, #128	; 0x80
1a0008f0:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0008f2:	2300      	movs	r3, #0
1a0008f4:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0008f6:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a0008f8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0008fc:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0008fe:	4a14      	ldr	r2, [pc, #80]	; (1a000950 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000900:	4295      	cmp	r5, r2
1a000902:	d903      	bls.n	1a00090c <Chip_Clock_CalcMainPLLValue+0x38>
1a000904:	fb03 f000 	mul.w	r0, r3, r0
1a000908:	4285      	cmp	r5, r0
1a00090a:	d007      	beq.n	1a00091c <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a00090c:	4621      	mov	r1, r4
1a00090e:	4628      	mov	r0, r5
1a000910:	f7ff fe9c 	bl	1a00064c <pll_get_frac>
       if (!ppll->nsel) {
1a000914:	68a3      	ldr	r3, [r4, #8]
1a000916:	b18b      	cbz	r3, 1a00093c <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a000918:	3b01      	subs	r3, #1
1a00091a:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a00091c:	6923      	ldr	r3, [r4, #16]
1a00091e:	b183      	cbz	r3, 1a000942 <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a000920:	68e2      	ldr	r2, [r4, #12]
1a000922:	b10a      	cbz	r2, 1a000928 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a000924:	3a01      	subs	r2, #1
1a000926:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a000928:	3b01      	subs	r3, #1
1a00092a:	6123      	str	r3, [r4, #16]
   return 0;
1a00092c:	2000      	movs	r0, #0
1a00092e:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a000930:	f04f 30ff 	mov.w	r0, #4294967295
1a000934:	bd38      	pop	{r3, r4, r5, pc}
1a000936:	f04f 30ff 	mov.w	r0, #4294967295
1a00093a:	bd38      	pop	{r3, r4, r5, pc}
           return -1;
1a00093c:	f04f 30ff 	mov.w	r0, #4294967295
1a000940:	bd38      	pop	{r3, r4, r5, pc}
       return - 1;
1a000942:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000946:	bd38      	pop	{r3, r4, r5, pc}
1a000948:	ff6b3a10 	.word	0xff6b3a10
1a00094c:	0b940510 	.word	0x0b940510
1a000950:	094c5eff 	.word	0x094c5eff

1a000954 <Chip_Clock_GetMainPLLHz>:
{
1a000954:	b530      	push	{r4, r5, lr}
1a000956:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000958:	4d17      	ldr	r5, [pc, #92]	; (1a0009b8 <Chip_Clock_GetMainPLLHz+0x64>)
1a00095a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00095c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000960:	f7ff ff5c 	bl	1a00081c <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000964:	4b15      	ldr	r3, [pc, #84]	; (1a0009bc <Chip_Clock_GetMainPLLHz+0x68>)
1a000966:	681b      	ldr	r3, [r3, #0]
1a000968:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00096a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00096c:	f013 0f01 	tst.w	r3, #1
1a000970:	d01f      	beq.n	1a0009b2 <Chip_Clock_GetMainPLLHz+0x5e>
   msel = (PLLReg >> 16) & 0xFF;
1a000972:	f3c4 4207 	ubfx	r2, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000976:	f3c4 3301 	ubfx	r3, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a00097a:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a00097e:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a000982:	3201      	adds	r2, #1
   n = nsel + 1;
1a000984:	3301      	adds	r3, #1
   p = ptab[psel];
1a000986:	f10d 0e08 	add.w	lr, sp, #8
1a00098a:	4471      	add	r1, lr
1a00098c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a000990:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000994:	d108      	bne.n	1a0009a8 <Chip_Clock_GetMainPLLHz+0x54>
1a000996:	b93d      	cbnz	r5, 1a0009a8 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000998:	0049      	lsls	r1, r1, #1
1a00099a:	fbb2 f2f1 	udiv	r2, r2, r1
1a00099e:	fbb0 f0f3 	udiv	r0, r0, r3
1a0009a2:	fb00 f002 	mul.w	r0, r0, r2
1a0009a6:	e005      	b.n	1a0009b4 <Chip_Clock_GetMainPLLHz+0x60>
       return m * (freq / n);
1a0009a8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0009ac:	fb00 f002 	mul.w	r0, r0, r2
1a0009b0:	e000      	b.n	1a0009b4 <Chip_Clock_GetMainPLLHz+0x60>
       return 0;
1a0009b2:	2000      	movs	r0, #0
}
1a0009b4:	b003      	add	sp, #12
1a0009b6:	bd30      	pop	{r4, r5, pc}
1a0009b8:	40050000 	.word	0x40050000
1a0009bc:	1a001da4 	.word	0x1a001da4

1a0009c0 <Chip_Clock_GetDivRate>:
{
1a0009c0:	b538      	push	{r3, r4, r5, lr}
1a0009c2:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a0009c4:	4608      	mov	r0, r1
1a0009c6:	f7ff ff0d 	bl	1a0007e4 <Chip_Clock_GetDividerSource>
1a0009ca:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a0009cc:	4620      	mov	r0, r4
1a0009ce:	f7ff ff17 	bl	1a000800 <Chip_Clock_GetDividerDivisor>
1a0009d2:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0009d4:	4628      	mov	r0, r5
1a0009d6:	f7ff ff21 	bl	1a00081c <Chip_Clock_GetClockInputHz>
1a0009da:	3401      	adds	r4, #1
}
1a0009dc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0009e0:	bd38      	pop	{r3, r4, r5, pc}
1a0009e2:	Address 0x1a0009e2 is out of bounds.


1a0009e4 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0009e4:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0009e6:	f100 0416 	add.w	r4, r0, #22
1a0009ea:	00a4      	lsls	r4, r4, #2
1a0009ec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0009f0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0009f4:	6865      	ldr	r5, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a0009f6:	281b      	cmp	r0, #27
1a0009f8:	d813      	bhi.n	1a000a22 <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a0009fa:	2911      	cmp	r1, #17
1a0009fc:	d01a      	beq.n	1a000a34 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0009fe:	4c0e      	ldr	r4, [pc, #56]	; (1a000a38 <Chip_Clock_SetBaseClock+0x54>)
1a000a00:	402c      	ands	r4, r5

           if (autoblocken) {
1a000a02:	b10a      	cbz	r2, 1a000a08 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a000a04:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a000a08:	b10b      	cbz	r3, 1a000a0e <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a000a0a:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000a0e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000a12:	3016      	adds	r0, #22
1a000a14:	0080      	lsls	r0, r0, #2
1a000a16:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000a1a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000a1e:	6044      	str	r4, [r0, #4]
1a000a20:	e008      	b.n	1a000a34 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000a22:	f045 0501 	orr.w	r5, r5, #1
1a000a26:	3016      	adds	r0, #22
1a000a28:	0080      	lsls	r0, r0, #2
1a000a2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000a2e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000a32:	6045      	str	r5, [r0, #4]
   }
}
1a000a34:	bc30      	pop	{r4, r5}
1a000a36:	4770      	bx	lr
1a000a38:	e0fff7fe 	.word	0xe0fff7fe

1a000a3c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000a3c:	281b      	cmp	r0, #27
1a000a3e:	d901      	bls.n	1a000a44 <Chip_Clock_GetBaseClock+0x8>
       return CLKINPUT_PD;
1a000a40:	2011      	movs	r0, #17
1a000a42:	4770      	bx	lr
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000a44:	3016      	adds	r0, #22
1a000a46:	0080      	lsls	r0, r0, #2
1a000a48:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000a4c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000a50:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000a52:	f010 0f01 	tst.w	r0, #1
1a000a56:	d001      	beq.n	1a000a5c <Chip_Clock_GetBaseClock+0x20>
       return CLKINPUT_PD;
1a000a58:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000a5a:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000a5c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000a60:	4770      	bx	lr

1a000a62 <Chip_Clock_GetBaseClocktHz>:
{
1a000a62:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000a64:	f7ff ffea 	bl	1a000a3c <Chip_Clock_GetBaseClock>
1a000a68:	f7ff fed8 	bl	1a00081c <Chip_Clock_GetClockInputHz>
}
1a000a6c:	bd08      	pop	{r3, pc}
1a000a6e:	Address 0x1a000a6e is out of bounds.


1a000a70 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000a70:	b969      	cbnz	r1, 1a000a8e <Chip_Clock_EnableOpts+0x1e>
   uint32_t reg = 1;
1a000a72:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000a74:	b10a      	cbz	r2, 1a000a7a <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000a76:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000a7a:	2b02      	cmp	r3, #2
1a000a7c:	d009      	beq.n	1a000a92 <Chip_Clock_EnableOpts+0x22>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000a7e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000a82:	d209      	bcs.n	1a000a98 <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000a84:	3020      	adds	r0, #32
1a000a86:	4b07      	ldr	r3, [pc, #28]	; (1a000aa4 <Chip_Clock_EnableOpts+0x34>)
1a000a88:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000a8c:	4770      	bx	lr
       reg |= (1 << 1);
1a000a8e:	2103      	movs	r1, #3
1a000a90:	e7f0      	b.n	1a000a74 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a000a92:	f041 0120 	orr.w	r1, r1, #32
1a000a96:	e7f2      	b.n	1a000a7e <Chip_Clock_EnableOpts+0xe>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000a98:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000a9c:	4b02      	ldr	r3, [pc, #8]	; (1a000aa8 <Chip_Clock_EnableOpts+0x38>)
1a000a9e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000aa2:	4770      	bx	lr
1a000aa4:	40051000 	.word	0x40051000
1a000aa8:	40052000 	.word	0x40052000

1a000aac <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
   /* Start peripheral clock running */
   if (clk >= CLK_CCU2_START) {
1a000aac:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ab0:	d208      	bcs.n	1a000ac4 <Chip_Clock_Enable+0x18>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000ab2:	4a09      	ldr	r2, [pc, #36]	; (1a000ad8 <Chip_Clock_Enable+0x2c>)
1a000ab4:	3020      	adds	r0, #32
1a000ab6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000aba:	f043 0301 	orr.w	r3, r3, #1
1a000abe:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000ac2:	4770      	bx	lr
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000ac4:	4a05      	ldr	r2, [pc, #20]	; (1a000adc <Chip_Clock_Enable+0x30>)
1a000ac6:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000aca:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000ace:	f043 0301 	orr.w	r3, r3, #1
1a000ad2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000ad6:	4770      	bx	lr
1a000ad8:	40051000 	.word	0x40051000
1a000adc:	40052000 	.word	0x40052000

1a000ae0 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000ae0:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000ae2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ae6:	d309      	bcc.n	1a000afc <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000ae8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000aec:	4a0d      	ldr	r2, [pc, #52]	; (1a000b24 <Chip_Clock_GetRate+0x44>)
1a000aee:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000af2:	f014 0f01 	tst.w	r4, #1
1a000af6:	d107      	bne.n	1a000b08 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a000af8:	2000      	movs	r0, #0
   }

   return rate;
}
1a000afa:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000afc:	f100 0320 	add.w	r3, r0, #32
1a000b00:	4a09      	ldr	r2, [pc, #36]	; (1a000b28 <Chip_Clock_GetRate+0x48>)
1a000b02:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000b06:	e7f4      	b.n	1a000af2 <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000b08:	f7ff fe20 	bl	1a00074c <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000b0c:	f7ff ffa9 	bl	1a000a62 <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a000b10:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000b14:	d103      	bne.n	1a000b1e <Chip_Clock_GetRate+0x3e>
           div = 1;
1a000b16:	2301      	movs	r3, #1
       rate = rate / div;
1a000b18:	fbb0 f0f3 	udiv	r0, r0, r3
1a000b1c:	bd10      	pop	{r4, pc}
           div = 2;/* No other dividers supported */
1a000b1e:	2302      	movs	r3, #2
1a000b20:	e7fa      	b.n	1a000b18 <Chip_Clock_GetRate+0x38>
1a000b22:	bf00      	nop
1a000b24:	40052000 	.word	0x40052000
1a000b28:	40051000 	.word	0x40051000

1a000b2c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000b2c:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000b2e:	4b0f      	ldr	r3, [pc, #60]	; (1a000b6c <fpuInit+0x40>)
1a000b30:	681b      	ldr	r3, [r3, #0]
1a000b32:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000b34:	4b0e      	ldr	r3, [pc, #56]	; (1a000b70 <fpuInit+0x44>)
1a000b36:	681b      	ldr	r3, [r3, #0]
1a000b38:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000b3a:	9a02      	ldr	r2, [sp, #8]
1a000b3c:	4b0d      	ldr	r3, [pc, #52]	; (1a000b74 <fpuInit+0x48>)
1a000b3e:	429a      	cmp	r2, r3
1a000b40:	d00c      	beq.n	1a000b5c <fpuInit+0x30>
1a000b42:	2300      	movs	r3, #0

   if (vfpPresent) {
1a000b44:	b143      	cbz	r3, 1a000b58 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a000b46:	4a0c      	ldr	r2, [pc, #48]	; (1a000b78 <fpuInit+0x4c>)
1a000b48:	6813      	ldr	r3, [r2, #0]
1a000b4a:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000b4c:	9b03      	ldr	r3, [sp, #12]
1a000b4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000b52:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000b54:	9b03      	ldr	r3, [sp, #12]
1a000b56:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000b58:	b004      	add	sp, #16
1a000b5a:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000b5c:	9a01      	ldr	r2, [sp, #4]
1a000b5e:	4b07      	ldr	r3, [pc, #28]	; (1a000b7c <fpuInit+0x50>)
1a000b60:	429a      	cmp	r2, r3
1a000b62:	d001      	beq.n	1a000b68 <fpuInit+0x3c>
1a000b64:	2300      	movs	r3, #0
1a000b66:	e7ed      	b.n	1a000b44 <fpuInit+0x18>
1a000b68:	2301      	movs	r3, #1
1a000b6a:	e7eb      	b.n	1a000b44 <fpuInit+0x18>
1a000b6c:	e000ef40 	.word	0xe000ef40
1a000b70:	e000ef44 	.word	0xe000ef44
1a000b74:	10110021 	.word	0x10110021
1a000b78:	e000ed88 	.word	0xe000ed88
1a000b7c:	11000011 	.word	0x11000011

1a000b80 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000b80:	4770      	bx	lr

1a000b82 <Chip_GPIO_SetDir>:
}

/* Set Direction for a GPIO port */
void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
   if (out) {
1a000b82:	b943      	cbnz	r3, 1a000b96 <Chip_GPIO_SetDir+0x14>
       pGPIO->DIR[portNum] |= bitValue;
   }
   else {
       pGPIO->DIR[portNum] &= ~bitValue;
1a000b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000b88:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000b8c:	ea23 0202 	bic.w	r2, r3, r2
1a000b90:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000b94:	4770      	bx	lr
       pGPIO->DIR[portNum] |= bitValue;
1a000b96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000b9a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000b9e:	431a      	orrs	r2, r3
1a000ba0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000ba4:	4770      	bx	lr
1a000ba6:	Address 0x1a000ba6 is out of bounds.


1a000ba8 <Chip_I2C_EventHandler>:
{
   struct i2c_interface *iic = &i2c[id];
   volatile I2C_STATUS_T *stat;

   /* Only WAIT event needs to be handled */
   if (event != I2C_EVENT_WAIT) {
1a000ba8:	2901      	cmp	r1, #1
1a000baa:	d000      	beq.n	1a000bae <Chip_I2C_EventHandler+0x6>
1a000bac:	4770      	bx	lr
       return;
   }

   stat = &iic->mXfer->status;
1a000bae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000bb2:	0082      	lsls	r2, r0, #2
1a000bb4:	4b03      	ldr	r3, [pc, #12]	; (1a000bc4 <Chip_I2C_EventHandler+0x1c>)
1a000bb6:	4413      	add	r3, r2
1a000bb8:	691a      	ldr	r2, [r3, #16]
   /* Wait for the status to change */
   while (*stat == I2C_STATUS_BUSY) {}
1a000bba:	7d13      	ldrb	r3, [r2, #20]
1a000bbc:	b2db      	uxtb	r3, r3
1a000bbe:	2b04      	cmp	r3, #4
1a000bc0:	d0fb      	beq.n	1a000bba <Chip_I2C_EventHandler+0x12>
1a000bc2:	e7f3      	b.n	1a000bac <Chip_I2C_EventHandler+0x4>
1a000bc4:	10000008 	.word	0x10000008

1a000bc8 <handleMasterXferState>:
{
1a000bc8:	b410      	push	{r4}
   return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a000bca:	6843      	ldr	r3, [r0, #4]
1a000bcc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   switch (getCurState(pI2C)) {
1a000bd0:	2b58      	cmp	r3, #88	; 0x58
1a000bd2:	d87e      	bhi.n	1a000cd2 <handleMasterXferState+0x10a>
1a000bd4:	e8df f003 	tbb	[pc, r3]
1a000bd8:	7d7d7d79 	.word	0x7d7d7d79
1a000bdc:	7d7d7d7d 	.word	0x7d7d7d7d
1a000be0:	7d7d7d2f 	.word	0x7d7d7d2f
1a000be4:	7d7d7d7d 	.word	0x7d7d7d7d
1a000be8:	7d7d7d2f 	.word	0x7d7d7d2f
1a000bec:	7d7d7d7d 	.word	0x7d7d7d7d
1a000bf0:	7d7d7d39 	.word	0x7d7d7d39
1a000bf4:	7d7d7d7d 	.word	0x7d7d7d7d
1a000bf8:	7d7d7d6d 	.word	0x7d7d7d6d
1a000bfc:	7d7d7d7d 	.word	0x7d7d7d7d
1a000c00:	7d7d7d39 	.word	0x7d7d7d39
1a000c04:	7d7d7d7d 	.word	0x7d7d7d7d
1a000c08:	7d7d7d71 	.word	0x7d7d7d71
1a000c0c:	7d7d7d7d 	.word	0x7d7d7d7d
1a000c10:	7d7d7d75 	.word	0x7d7d7d75
1a000c14:	7d7d7d7d 	.word	0x7d7d7d7d
1a000c18:	7d7d7d6b 	.word	0x7d7d7d6b
1a000c1c:	7d7d7d7d 	.word	0x7d7d7d7d
1a000c20:	7d7d7d6d 	.word	0x7d7d7d6d
1a000c24:	7d7d7d7d 	.word	0x7d7d7d7d
1a000c28:	7d7d7d2d 	.word	0x7d7d7d2d
1a000c2c:	7d7d7d7d 	.word	0x7d7d7d7d
1a000c30:	4f          	.byte	0x4f
1a000c31:	00          	.byte	0x00
   uint32_t cclr = I2C_CON_FLAGS;
1a000c32:	233c      	movs	r3, #60	; 0x3c
1a000c34:	e020      	b.n	1a000c78 <handleMasterXferState+0xb0>
       pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a000c36:	780a      	ldrb	r2, [r1, #0]
1a000c38:	688b      	ldr	r3, [r1, #8]
1a000c3a:	fab3 f383 	clz	r3, r3
1a000c3e:	095b      	lsrs	r3, r3, #5
1a000c40:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a000c44:	6083      	str	r3, [r0, #8]
   uint32_t cclr = I2C_CON_FLAGS;
1a000c46:	233c      	movs	r3, #60	; 0x3c
       break;
1a000c48:	e023      	b.n	1a000c92 <handleMasterXferState+0xca>
       if (!xfer->txSz) {
1a000c4a:	688b      	ldr	r3, [r1, #8]
1a000c4c:	b94b      	cbnz	r3, 1a000c62 <handleMasterXferState+0x9a>
           cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a000c4e:	690b      	ldr	r3, [r1, #16]
1a000c50:	b123      	cbz	r3, 1a000c5c <handleMasterXferState+0x94>
1a000c52:	f06f 0320 	mvn.w	r3, #32
1a000c56:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a000c5a:	e01a      	b.n	1a000c92 <handleMasterXferState+0xca>
1a000c5c:	f06f 0310 	mvn.w	r3, #16
1a000c60:	e7f9      	b.n	1a000c56 <handleMasterXferState+0x8e>
           pI2C->DAT = *xfer->txBuff++;
1a000c62:	684b      	ldr	r3, [r1, #4]
1a000c64:	1c5a      	adds	r2, r3, #1
1a000c66:	604a      	str	r2, [r1, #4]
1a000c68:	781b      	ldrb	r3, [r3, #0]
1a000c6a:	6083      	str	r3, [r0, #8]
           xfer->txSz--;
1a000c6c:	688b      	ldr	r3, [r1, #8]
1a000c6e:	3b01      	subs	r3, #1
1a000c70:	608b      	str	r3, [r1, #8]
   uint32_t cclr = I2C_CON_FLAGS;
1a000c72:	233c      	movs	r3, #60	; 0x3c
1a000c74:	e00d      	b.n	1a000c92 <handleMasterXferState+0xca>
       cclr &= ~I2C_CON_STO;
1a000c76:	232c      	movs	r3, #44	; 0x2c
       *xfer->rxBuff++ = pI2C->DAT;
1a000c78:	68ca      	ldr	r2, [r1, #12]
1a000c7a:	1c54      	adds	r4, r2, #1
1a000c7c:	60cc      	str	r4, [r1, #12]
1a000c7e:	6884      	ldr	r4, [r0, #8]
1a000c80:	7014      	strb	r4, [r2, #0]
       xfer->rxSz--;
1a000c82:	690a      	ldr	r2, [r1, #16]
1a000c84:	3a01      	subs	r2, #1
1a000c86:	610a      	str	r2, [r1, #16]
       if (xfer->rxSz > 1) {
1a000c88:	690a      	ldr	r2, [r1, #16]
1a000c8a:	2a01      	cmp	r2, #1
1a000c8c:	dd01      	ble.n	1a000c92 <handleMasterXferState+0xca>
           cclr &= ~I2C_CON_AA;
1a000c8e:	f023 0304 	bic.w	r3, r3, #4
   pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a000c92:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a000c96:	6002      	str	r2, [r0, #0]
   pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a000c98:	f023 0210 	bic.w	r2, r3, #16
1a000c9c:	6182      	str	r2, [r0, #24]
   if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a000c9e:	f013 0f10 	tst.w	r3, #16
1a000ca2:	d018      	beq.n	1a000cd6 <handleMasterXferState+0x10e>
1a000ca4:	7d0b      	ldrb	r3, [r1, #20]
1a000ca6:	2b02      	cmp	r3, #2
1a000ca8:	d015      	beq.n	1a000cd6 <handleMasterXferState+0x10e>
   return 1;
1a000caa:	2001      	movs	r0, #1
1a000cac:	e017      	b.n	1a000cde <handleMasterXferState+0x116>
   uint32_t cclr = I2C_CON_FLAGS;
1a000cae:	233c      	movs	r3, #60	; 0x3c
1a000cb0:	e7ea      	b.n	1a000c88 <handleMasterXferState+0xc0>
       xfer->status = I2C_STATUS_SLAVENAK;
1a000cb2:	2305      	movs	r3, #5
1a000cb4:	750b      	strb	r3, [r1, #20]
       cclr &= ~I2C_CON_STO;
1a000cb6:	232c      	movs	r3, #44	; 0x2c
       break;
1a000cb8:	e7eb      	b.n	1a000c92 <handleMasterXferState+0xca>
       xfer->status = I2C_STATUS_NAK;
1a000cba:	2301      	movs	r3, #1
1a000cbc:	750b      	strb	r3, [r1, #20]
       cclr &= ~I2C_CON_STO;
1a000cbe:	232c      	movs	r3, #44	; 0x2c
       break;
1a000cc0:	e7e7      	b.n	1a000c92 <handleMasterXferState+0xca>
       xfer->status = I2C_STATUS_ARBLOST;
1a000cc2:	2302      	movs	r3, #2
1a000cc4:	750b      	strb	r3, [r1, #20]
   uint32_t cclr = I2C_CON_FLAGS;
1a000cc6:	233c      	movs	r3, #60	; 0x3c
       break;
1a000cc8:	e7e3      	b.n	1a000c92 <handleMasterXferState+0xca>
       xfer->status = I2C_STATUS_BUSERR;
1a000cca:	2303      	movs	r3, #3
1a000ccc:	750b      	strb	r3, [r1, #20]
       cclr &= ~I2C_CON_STO;
1a000cce:	232c      	movs	r3, #44	; 0x2c
1a000cd0:	e7df      	b.n	1a000c92 <handleMasterXferState+0xca>
   uint32_t cclr = I2C_CON_FLAGS;
1a000cd2:	233c      	movs	r3, #60	; 0x3c
1a000cd4:	e7dd      	b.n	1a000c92 <handleMasterXferState+0xca>
       if (xfer->status == I2C_STATUS_BUSY) {
1a000cd6:	7d0b      	ldrb	r3, [r1, #20]
1a000cd8:	2b04      	cmp	r3, #4
1a000cda:	d003      	beq.n	1a000ce4 <handleMasterXferState+0x11c>
       return 0;
1a000cdc:	2000      	movs	r0, #0
}
1a000cde:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ce2:	4770      	bx	lr
           xfer->status = I2C_STATUS_DONE;
1a000ce4:	2000      	movs	r0, #0
1a000ce6:	7508      	strb	r0, [r1, #20]
1a000ce8:	e7f9      	b.n	1a000cde <handleMasterXferState+0x116>
1a000cea:	Address 0x1a000cea is out of bounds.


1a000cec <Chip_I2C_Init>:
   }
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000cec:	b570      	push	{r4, r5, r6, lr}
1a000cee:	4605      	mov	r5, r0
   Chip_Clock_Enable(i2c[id].clk);
1a000cf0:	4e06      	ldr	r6, [pc, #24]	; (1a000d0c <Chip_I2C_Init+0x20>)
1a000cf2:	00c4      	lsls	r4, r0, #3
1a000cf4:	1a22      	subs	r2, r4, r0
1a000cf6:	0093      	lsls	r3, r2, #2
1a000cf8:	4433      	add	r3, r6
1a000cfa:	8898      	ldrh	r0, [r3, #4]
1a000cfc:	f7ff fed6 	bl	1a000aac <Chip_Clock_Enable>
   enableClk(id);

   /* Set I2C operation to default */
   LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000d00:	1b64      	subs	r4, r4, r5
1a000d02:	00a3      	lsls	r3, r4, #2
1a000d04:	58f3      	ldr	r3, [r6, r3]
1a000d06:	226c      	movs	r2, #108	; 0x6c
1a000d08:	619a      	str	r2, [r3, #24]
1a000d0a:	bd70      	pop	{r4, r5, r6, pc}
1a000d0c:	10000008 	.word	0x10000008

1a000d10 <Chip_I2C_SetClockRate>:
   disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000d14:	460c      	mov	r4, r1
   return Chip_Clock_GetRate(i2c[id].clk);
1a000d16:	4e0b      	ldr	r6, [pc, #44]	; (1a000d44 <Chip_I2C_SetClockRate+0x34>)
1a000d18:	00c5      	lsls	r5, r0, #3
1a000d1a:	1a2b      	subs	r3, r5, r0
1a000d1c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000d20:	eb06 0308 	add.w	r3, r6, r8
1a000d24:	8898      	ldrh	r0, [r3, #4]
1a000d26:	f7ff fedb 	bl	1a000ae0 <Chip_Clock_GetRate>
   uint32_t SCLValue;

   SCLValue = (getClkRate(id) / clockrate);
1a000d2a:	fbb0 f0f4 	udiv	r0, r0, r4
   LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000d2e:	f856 3008 	ldr.w	r3, [r6, r8]
1a000d32:	0842      	lsrs	r2, r0, #1
1a000d34:	611a      	str	r2, [r3, #16]
   LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000d36:	f856 3008 	ldr.w	r3, [r6, r8]
1a000d3a:	691a      	ldr	r2, [r3, #16]
1a000d3c:	1a80      	subs	r0, r0, r2
1a000d3e:	6158      	str	r0, [r3, #20]
1a000d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000d44:	10000008 	.word	0x10000008

1a000d48 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
   struct i2c_interface *iic = &i2c[id];
   if (!iic->mXfer) {
1a000d48:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000d4c:	009a      	lsls	r2, r3, #2
1a000d4e:	4b09      	ldr	r3, [pc, #36]	; (1a000d74 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d50:	4413      	add	r3, r2
1a000d52:	691b      	ldr	r3, [r3, #16]
1a000d54:	b153      	cbz	r3, 1a000d6c <Chip_I2C_SetMasterEventHandler+0x24>
       iic->mEvent = event;
   }
   return iic->mEvent == event;
1a000d56:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000d5a:	0082      	lsls	r2, r0, #2
1a000d5c:	4b05      	ldr	r3, [pc, #20]	; (1a000d74 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d5e:	4413      	add	r3, r2
1a000d60:	6898      	ldr	r0, [r3, #8]
}
1a000d62:	4281      	cmp	r1, r0
1a000d64:	bf14      	ite	ne
1a000d66:	2000      	movne	r0, #0
1a000d68:	2001      	moveq	r0, #1
1a000d6a:	4770      	bx	lr
       iic->mEvent = event;
1a000d6c:	4b01      	ldr	r3, [pc, #4]	; (1a000d74 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d6e:	4413      	add	r3, r2
1a000d70:	6099      	str	r1, [r3, #8]
1a000d72:	e7f0      	b.n	1a000d56 <Chip_I2C_SetMasterEventHandler+0xe>
1a000d74:	10000008 	.word	0x10000008

1a000d78 <Chip_I2C_MasterStateHandler>:
   return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a000d78:	b510      	push	{r4, lr}
1a000d7a:	4604      	mov	r4, r0
   if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a000d7c:	480a      	ldr	r0, [pc, #40]	; (1a000da8 <Chip_I2C_MasterStateHandler+0x30>)
1a000d7e:	00e3      	lsls	r3, r4, #3
1a000d80:	1b1b      	subs	r3, r3, r4
1a000d82:	009a      	lsls	r2, r3, #2
1a000d84:	1883      	adds	r3, r0, r2
1a000d86:	6919      	ldr	r1, [r3, #16]
1a000d88:	5880      	ldr	r0, [r0, r2]
1a000d8a:	f7ff ff1d 	bl	1a000bc8 <handleMasterXferState>
1a000d8e:	b100      	cbz	r0, 1a000d92 <Chip_I2C_MasterStateHandler+0x1a>
1a000d90:	bd10      	pop	{r4, pc}
       i2c[id].mEvent(id, I2C_EVENT_DONE);
1a000d92:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a000d96:	009a      	lsls	r2, r3, #2
1a000d98:	4b03      	ldr	r3, [pc, #12]	; (1a000da8 <Chip_I2C_MasterStateHandler+0x30>)
1a000d9a:	4413      	add	r3, r2
1a000d9c:	689b      	ldr	r3, [r3, #8]
1a000d9e:	2102      	movs	r1, #2
1a000da0:	4620      	mov	r0, r4
1a000da2:	4798      	blx	r3
   }
}
1a000da4:	e7f4      	b.n	1a000d90 <Chip_I2C_MasterStateHandler+0x18>
1a000da6:	bf00      	nop
1a000da8:	10000008 	.word	0x10000008

1a000dac <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
   return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a000dac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000db0:	0083      	lsls	r3, r0, #2
1a000db2:	4a03      	ldr	r2, [pc, #12]	; (1a000dc0 <Chip_I2C_IsStateChanged+0x14>)
1a000db4:	58d3      	ldr	r3, [r2, r3]
1a000db6:	6818      	ldr	r0, [r3, #0]
}
1a000db8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a000dbc:	4770      	bx	lr
1a000dbe:	bf00      	nop
1a000dc0:	10000008 	.word	0x10000008

1a000dc4 <Chip_I2C_EventHandlerPolling>:
   if (event != I2C_EVENT_WAIT) {
1a000dc4:	2901      	cmp	r1, #1
1a000dc6:	d000      	beq.n	1a000dca <Chip_I2C_EventHandlerPolling+0x6>
1a000dc8:	4770      	bx	lr
{
1a000dca:	b538      	push	{r3, r4, r5, lr}
1a000dcc:	4604      	mov	r4, r0
   stat = &iic->mXfer->status;
1a000dce:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000dd2:	009a      	lsls	r2, r3, #2
1a000dd4:	4b08      	ldr	r3, [pc, #32]	; (1a000df8 <Chip_I2C_EventHandlerPolling+0x34>)
1a000dd6:	4413      	add	r3, r2
1a000dd8:	691d      	ldr	r5, [r3, #16]
   while (*stat == I2C_STATUS_BUSY) {
1a000dda:	7d2b      	ldrb	r3, [r5, #20]
1a000ddc:	b2db      	uxtb	r3, r3
1a000dde:	2b04      	cmp	r3, #4
1a000de0:	d108      	bne.n	1a000df4 <Chip_I2C_EventHandlerPolling+0x30>
       if (Chip_I2C_IsStateChanged(id)) {
1a000de2:	4620      	mov	r0, r4
1a000de4:	f7ff ffe2 	bl	1a000dac <Chip_I2C_IsStateChanged>
1a000de8:	2800      	cmp	r0, #0
1a000dea:	d0f6      	beq.n	1a000dda <Chip_I2C_EventHandlerPolling+0x16>
           Chip_I2C_MasterStateHandler(id);
1a000dec:	4620      	mov	r0, r4
1a000dee:	f7ff ffc3 	bl	1a000d78 <Chip_I2C_MasterStateHandler>
1a000df2:	e7f2      	b.n	1a000dda <Chip_I2C_EventHandlerPolling+0x16>
1a000df4:	bd38      	pop	{r3, r4, r5, pc}
1a000df6:	bf00      	nop
1a000df8:	10000008 	.word	0x10000008

1a000dfc <Chip_I2CM_XferHandler>:
 * @note   I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
   return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a000dfc:	6843      	ldr	r3, [r0, #4]
1a000dfe:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
   uint32_t cclr = I2C_CON_FLAGS;

   switch (Chip_I2CM_GetCurState(pI2C)) {
1a000e02:	2b58      	cmp	r3, #88	; 0x58
1a000e04:	f200 8083 	bhi.w	1a000f0e <Chip_I2CM_XferHandler+0x112>
1a000e08:	e8df f003 	tbb	[pc, r3]
1a000e0c:	8181817d 	.word	0x8181817d
1a000e10:	81818181 	.word	0x81818181
1a000e14:	8181812d 	.word	0x8181812d
1a000e18:	81818181 	.word	0x81818181
1a000e1c:	8181812d 	.word	0x8181812d
1a000e20:	81818181 	.word	0x81818181
1a000e24:	81818145 	.word	0x81818145
1a000e28:	81818181 	.word	0x81818181
1a000e2c:	81818141 	.word	0x81818141
1a000e30:	81818181 	.word	0x81818181
1a000e34:	81818145 	.word	0x81818145
1a000e38:	81818181 	.word	0x81818181
1a000e3c:	81818141 	.word	0x81818141
1a000e40:	81818181 	.word	0x81818181
1a000e44:	81818179 	.word	0x81818179
1a000e48:	81818181 	.word	0x81818181
1a000e4c:	81818163 	.word	0x81818163
1a000e50:	81818181 	.word	0x81818181
1a000e54:	81818175 	.word	0x81818175
1a000e58:	81818181 	.word	0x81818181
1a000e5c:	8181815b 	.word	0x8181815b
1a000e60:	81818181 	.word	0x81818181
1a000e64:	5b          	.byte	0x5b
1a000e65:	00          	.byte	0x00
   case 0x08:      /* Start condition on bus */
   case 0x10:      /* Repeated start condition */
       pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a000e66:	780a      	ldrb	r2, [r1, #0]
1a000e68:	888b      	ldrh	r3, [r1, #4]
1a000e6a:	fab3 f383 	clz	r3, r3
1a000e6e:	095b      	lsrs	r3, r3, #5
1a000e70:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a000e74:	6083      	str	r3, [r0, #8]
   uint32_t cclr = I2C_CON_FLAGS;
1a000e76:	233c      	movs	r3, #60	; 0x3c
       cclr &= ~I2C_CON_STO;
        break;
   }

   /* Set clear control flags */
   pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a000e78:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a000e7c:	6002      	str	r2, [r0, #0]
   /* Stop flag should not be cleared as it is a reserved bit */
   pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a000e7e:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a000e82:	6183      	str	r3, [r0, #24]

   return xfer->status != I2CM_STATUS_BUSY;
1a000e84:	8848      	ldrh	r0, [r1, #2]
}
1a000e86:	38ff      	subs	r0, #255	; 0xff
1a000e88:	bf18      	it	ne
1a000e8a:	2001      	movne	r0, #1
1a000e8c:	4770      	bx	lr
       if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a000e8e:	784b      	ldrb	r3, [r1, #1]
1a000e90:	f013 0f01 	tst.w	r3, #1
1a000e94:	d007      	beq.n	1a000ea6 <Chip_I2CM_XferHandler+0xaa>
       if (!xfer->txSz) {
1a000e96:	888b      	ldrh	r3, [r1, #4]
1a000e98:	b94b      	cbnz	r3, 1a000eae <Chip_I2CM_XferHandler+0xb2>
           if (xfer->rxSz) {
1a000e9a:	88cb      	ldrh	r3, [r1, #6]
1a000e9c:	2b00      	cmp	r3, #0
1a000e9e:	d13a      	bne.n	1a000f16 <Chip_I2CM_XferHandler+0x11a>
               xfer->status = I2CM_STATUS_OK;
1a000ea0:	804b      	strh	r3, [r1, #2]
               cclr &= ~I2C_CON_STO;
1a000ea2:	232c      	movs	r3, #44	; 0x2c
1a000ea4:	e7e8      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
           xfer->status = I2CM_STATUS_NAK;
1a000ea6:	2302      	movs	r3, #2
1a000ea8:	804b      	strh	r3, [r1, #2]
           cclr &= ~I2C_CON_STO;
1a000eaa:	232c      	movs	r3, #44	; 0x2c
           break;
1a000eac:	e7e4      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
           pI2C->DAT = *xfer->txBuff++;
1a000eae:	688b      	ldr	r3, [r1, #8]
1a000eb0:	1c5a      	adds	r2, r3, #1
1a000eb2:	608a      	str	r2, [r1, #8]
1a000eb4:	781b      	ldrb	r3, [r3, #0]
1a000eb6:	6083      	str	r3, [r0, #8]
           xfer->txSz--;
1a000eb8:	888b      	ldrh	r3, [r1, #4]
1a000eba:	3b01      	subs	r3, #1
1a000ebc:	808b      	strh	r3, [r1, #4]
   uint32_t cclr = I2C_CON_FLAGS;
1a000ebe:	233c      	movs	r3, #60	; 0x3c
1a000ec0:	e7da      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
       *xfer->rxBuff++ = pI2C->DAT;
1a000ec2:	68cb      	ldr	r3, [r1, #12]
1a000ec4:	1c5a      	adds	r2, r3, #1
1a000ec6:	60ca      	str	r2, [r1, #12]
1a000ec8:	6882      	ldr	r2, [r0, #8]
1a000eca:	701a      	strb	r2, [r3, #0]
       xfer->rxSz--;
1a000ecc:	88cb      	ldrh	r3, [r1, #6]
1a000ece:	3b01      	subs	r3, #1
1a000ed0:	80cb      	strh	r3, [r1, #6]
       if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a000ed2:	88ca      	ldrh	r2, [r1, #6]
1a000ed4:	2a01      	cmp	r2, #1
1a000ed6:	d906      	bls.n	1a000ee6 <Chip_I2CM_XferHandler+0xea>
           cclr &= ~I2C_CON_AA;
1a000ed8:	2338      	movs	r3, #56	; 0x38
       if (xfer->rxSz == 0) {
1a000eda:	2a00      	cmp	r2, #0
1a000edc:	d1cc      	bne.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
           xfer->status = I2CM_STATUS_OK;
1a000ede:	804a      	strh	r2, [r1, #2]
           cclr &= ~I2C_CON_STO;
1a000ee0:	f023 0310 	bic.w	r3, r3, #16
1a000ee4:	e7c8      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
       if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a000ee6:	784b      	ldrb	r3, [r1, #1]
1a000ee8:	f013 0f02 	tst.w	r3, #2
1a000eec:	d101      	bne.n	1a000ef2 <Chip_I2CM_XferHandler+0xf6>
   uint32_t cclr = I2C_CON_FLAGS;
1a000eee:	233c      	movs	r3, #60	; 0x3c
1a000ef0:	e7f3      	b.n	1a000eda <Chip_I2CM_XferHandler+0xde>
           cclr &= ~I2C_CON_AA;
1a000ef2:	2338      	movs	r3, #56	; 0x38
1a000ef4:	e7f1      	b.n	1a000eda <Chip_I2CM_XferHandler+0xde>
       xfer->status = I2CM_STATUS_SLAVE_NAK;
1a000ef6:	2304      	movs	r3, #4
1a000ef8:	804b      	strh	r3, [r1, #2]
       cclr &= ~I2C_CON_STO;
1a000efa:	232c      	movs	r3, #44	; 0x2c
       break;
1a000efc:	e7bc      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
       xfer->status = I2CM_STATUS_ARBLOST;
1a000efe:	2305      	movs	r3, #5
1a000f00:	804b      	strh	r3, [r1, #2]
   uint32_t cclr = I2C_CON_FLAGS;
1a000f02:	233c      	movs	r3, #60	; 0x3c
       break;
1a000f04:	e7b8      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
       xfer->status = I2CM_STATUS_BUS_ERROR;
1a000f06:	2303      	movs	r3, #3
1a000f08:	804b      	strh	r3, [r1, #2]
       cclr &= ~I2C_CON_STO;
1a000f0a:	232c      	movs	r3, #44	; 0x2c
        break;
1a000f0c:	e7b4      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
       xfer->status = I2CM_STATUS_ERROR;
1a000f0e:	2301      	movs	r3, #1
1a000f10:	804b      	strh	r3, [r1, #2]
       cclr &= ~I2C_CON_STO;
1a000f12:	232c      	movs	r3, #44	; 0x2c
        break;
1a000f14:	e7b0      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>
               cclr &= ~I2C_CON_STA;
1a000f16:	231c      	movs	r3, #28
1a000f18:	e7ae      	b.n	1a000e78 <Chip_I2CM_XferHandler+0x7c>

1a000f1a <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
   /* set the transfer status as busy */
   xfer->status = I2CM_STATUS_BUSY;
1a000f1a:	23ff      	movs	r3, #255	; 0xff
1a000f1c:	804b      	strh	r3, [r1, #2]
   pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a000f1e:	232c      	movs	r3, #44	; 0x2c
1a000f20:	6183      	str	r3, [r0, #24]
   pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a000f22:	2360      	movs	r3, #96	; 0x60
1a000f24:	6003      	str	r3, [r0, #0]
1a000f26:	4770      	bx	lr

1a000f28 <Chip_I2CM_XferBlocking>:
   Chip_I2CM_SendStart(pI2C);
}

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a000f28:	b538      	push	{r3, r4, r5, lr}
1a000f2a:	4604      	mov	r4, r0
1a000f2c:	460d      	mov	r5, r1
   uint32_t ret = 0;
   /* start transfer */
   Chip_I2CM_Xfer(pI2C, xfer);
1a000f2e:	f7ff fff4 	bl	1a000f1a <Chip_I2CM_Xfer>
   uint32_t ret = 0;
1a000f32:	2000      	movs	r0, #0

   while (ret == 0) {
1a000f34:	e007      	b.n	1a000f46 <Chip_I2CM_XferBlocking+0x1e>
   return pI2C->CONSET & I2C_CON_SI;
1a000f36:	6823      	ldr	r3, [r4, #0]
       /* wait for status change interrupt */
       while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a000f38:	f013 0f08 	tst.w	r3, #8
1a000f3c:	d0fb      	beq.n	1a000f36 <Chip_I2CM_XferBlocking+0xe>
       /* call state change handler */
       ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a000f3e:	4629      	mov	r1, r5
1a000f40:	4620      	mov	r0, r4
1a000f42:	f7ff ff5b 	bl	1a000dfc <Chip_I2CM_XferHandler>
   while (ret == 0) {
1a000f46:	2800      	cmp	r0, #0
1a000f48:	d0f5      	beq.n	1a000f36 <Chip_I2CM_XferBlocking+0xe>
   }
   return ret;
}
1a000f4a:	bd38      	pop	{r3, r4, r5, pc}

1a000f4c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000f4c:	b570      	push	{r4, r5, r6, lr}
1a000f4e:	b092      	sub	sp, #72	; 0x48
1a000f50:	4605      	mov	r5, r0
1a000f52:	460e      	mov	r6, r1
1a000f54:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000f56:	f241 537c 	movw	r3, #5500	; 0x157c
1a000f5a:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000f5c:	2806      	cmp	r0, #6
1a000f5e:	d044      	beq.n	1a000fea <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000f60:	2300      	movs	r3, #0
1a000f62:	2201      	movs	r2, #1
1a000f64:	4629      	mov	r1, r5
1a000f66:	2004      	movs	r0, #4
1a000f68:	f7ff fd3c 	bl	1a0009e4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000f6c:	4a4a      	ldr	r2, [pc, #296]	; (1a001098 <Chip_SetupCoreClock+0x14c>)
1a000f6e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f70:	f043 0301 	orr.w	r3, r3, #1
1a000f74:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000f76:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f7a:	a909      	add	r1, sp, #36	; 0x24
1a000f7c:	4630      	mov	r0, r6
1a000f7e:	f7ff fca9 	bl	1a0008d4 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000f82:	4b46      	ldr	r3, [pc, #280]	; (1a00109c <Chip_SetupCoreClock+0x150>)
1a000f84:	429e      	cmp	r6, r3
1a000f86:	d938      	bls.n	1a000ffa <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000f8a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000f8e:	d001      	beq.n	1a000f94 <Chip_SetupCoreClock+0x48>
1a000f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000f92:	b36a      	cbz	r2, 1a000ff0 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000f94:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000f98:	a901      	add	r1, sp, #4
1a000f9a:	4840      	ldr	r0, [pc, #256]	; (1a00109c <Chip_SetupCoreClock+0x150>)
1a000f9c:	f7ff fc9a 	bl	1a0008d4 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000fa0:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fa4:	9b01      	ldr	r3, [sp, #4]
1a000fa6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000faa:	9a05      	ldr	r2, [sp, #20]
1a000fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fb0:	9a03      	ldr	r2, [sp, #12]
1a000fb2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fb6:	9a04      	ldr	r2, [sp, #16]
1a000fb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fbc:	4a36      	ldr	r2, [pc, #216]	; (1a001098 <Chip_SetupCoreClock+0x14c>)
1a000fbe:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000fc0:	4b35      	ldr	r3, [pc, #212]	; (1a001098 <Chip_SetupCoreClock+0x14c>)
1a000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000fc4:	f013 0f01 	tst.w	r3, #1
1a000fc8:	d0fa      	beq.n	1a000fc0 <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000fca:	2300      	movs	r3, #0
1a000fcc:	2201      	movs	r2, #1
1a000fce:	2109      	movs	r1, #9
1a000fd0:	2004      	movs	r0, #4
1a000fd2:	f7ff fd07 	bl	1a0009e4 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000fd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000fd8:	1e5a      	subs	r2, r3, #1
1a000fda:	9211      	str	r2, [sp, #68]	; 0x44
1a000fdc:	2b00      	cmp	r3, #0
1a000fde:	d1fa      	bne.n	1a000fd6 <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a000fe0:	f241 537c 	movw	r3, #5500	; 0x157c
1a000fe4:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a000fe6:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000fe8:	e008      	b.n	1a000ffc <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a000fea:	f7ff fbd5 	bl	1a000798 <Chip_Clock_EnableCrystal>
1a000fee:	e7b7      	b.n	1a000f60 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000ff4:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a000ff6:	2501      	movs	r5, #1
1a000ff8:	e000      	b.n	1a000ffc <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a000ffa:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000ffc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a001000:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001002:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001006:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a001008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00100c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00100e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a001014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001018:	4a1f      	ldr	r2, [pc, #124]	; (1a001098 <Chip_SetupCoreClock+0x14c>)
1a00101a:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00101c:	4b1e      	ldr	r3, [pc, #120]	; (1a001098 <Chip_SetupCoreClock+0x14c>)
1a00101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a001020:	f013 0f01 	tst.w	r3, #1
1a001024:	d0fa      	beq.n	1a00101c <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001026:	2300      	movs	r3, #0
1a001028:	2201      	movs	r2, #1
1a00102a:	2109      	movs	r1, #9
1a00102c:	2004      	movs	r0, #4
1a00102e:	f7ff fcd9 	bl	1a0009e4 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a001032:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a001034:	1e5a      	subs	r2, r3, #1
1a001036:	9211      	str	r2, [sp, #68]	; 0x44
1a001038:	2b00      	cmp	r3, #0
1a00103a:	d1fa      	bne.n	1a001032 <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a00103c:	b1d5      	cbz	r5, 1a001074 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a00103e:	f241 537c 	movw	r3, #5500	; 0x157c
1a001042:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a001044:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00104a:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a00104c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a001050:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a001056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00105a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00105c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a001062:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001066:	4a0c      	ldr	r2, [pc, #48]	; (1a001098 <Chip_SetupCoreClock+0x14c>)
1a001068:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a00106a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00106c:	1e5a      	subs	r2, r3, #1
1a00106e:	9211      	str	r2, [sp, #68]	; 0x44
1a001070:	2b00      	cmp	r3, #0
1a001072:	d1fa      	bne.n	1a00106a <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a001074:	b174      	cbz	r4, 1a001094 <Chip_SetupCoreClock+0x148>
1a001076:	2400      	movs	r4, #0
1a001078:	e00a      	b.n	1a001090 <Chip_SetupCoreClock+0x144>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00107a:	4809      	ldr	r0, [pc, #36]	; (1a0010a0 <Chip_SetupCoreClock+0x154>)
1a00107c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001080:	78cb      	ldrb	r3, [r1, #3]
1a001082:	788a      	ldrb	r2, [r1, #2]
1a001084:	7849      	ldrb	r1, [r1, #1]
1a001086:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00108a:	f7ff fcab 	bl	1a0009e4 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00108e:	3401      	adds	r4, #1
1a001090:	2c11      	cmp	r4, #17
1a001092:	d9f2      	bls.n	1a00107a <Chip_SetupCoreClock+0x12e>
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a001094:	b012      	add	sp, #72	; 0x48
1a001096:	bd70      	pop	{r4, r5, r6, pc}
1a001098:	40050000 	.word	0x40050000
1a00109c:	068e7780 	.word	0x068e7780
1a0010a0:	1a001e1c 	.word	0x1a001e1c

1a0010a4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a0010a4:	4b09      	ldr	r3, [pc, #36]	; (1a0010cc <Chip_UART_GetIndex+0x28>)
1a0010a6:	4298      	cmp	r0, r3
1a0010a8:	d009      	beq.n	1a0010be <Chip_UART_GetIndex+0x1a>
1a0010aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0010ae:	4298      	cmp	r0, r3
1a0010b0:	d007      	beq.n	1a0010c2 <Chip_UART_GetIndex+0x1e>
1a0010b2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0010b6:	4298      	cmp	r0, r3
1a0010b8:	d005      	beq.n	1a0010c6 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a0010ba:	2000      	movs	r0, #0
1a0010bc:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a0010be:	2002      	movs	r0, #2
1a0010c0:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a0010c2:	2003      	movs	r0, #3
1a0010c4:	4770      	bx	lr
           return 1;
1a0010c6:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a0010c8:	4770      	bx	lr
1a0010ca:	bf00      	nop
1a0010cc:	400c1000 	.word	0x400c1000

1a0010d0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0010d0:	b530      	push	{r4, r5, lr}
1a0010d2:	b083      	sub	sp, #12
1a0010d4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0010d6:	f7ff ffe5 	bl	1a0010a4 <Chip_UART_GetIndex>
1a0010da:	2301      	movs	r3, #1
1a0010dc:	461a      	mov	r2, r3
1a0010de:	4619      	mov	r1, r3
1a0010e0:	4d0e      	ldr	r5, [pc, #56]	; (1a00111c <Chip_UART_Init+0x4c>)
1a0010e2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0010e6:	f7ff fcc3 	bl	1a000a70 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a0010ea:	2307      	movs	r3, #7
1a0010ec:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0010ee:	2300      	movs	r3, #0
1a0010f0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a0010f2:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a0010f4:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a0010f6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a0010f8:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a0010fa:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a0010fc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0010fe:	4b08      	ldr	r3, [pc, #32]	; (1a001120 <Chip_UART_Init+0x50>)
1a001100:	429c      	cmp	r4, r3
1a001102:	d005      	beq.n	1a001110 <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a001104:	2303      	movs	r3, #3
1a001106:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a001108:	2310      	movs	r3, #16
1a00110a:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a00110c:	b003      	add	sp, #12
1a00110e:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a001110:	2300      	movs	r3, #0
1a001112:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a001114:	69a3      	ldr	r3, [r4, #24]
1a001116:	9301      	str	r3, [sp, #4]
1a001118:	e7f4      	b.n	1a001104 <Chip_UART_Init+0x34>
1a00111a:	bf00      	nop
1a00111c:	1a001e6c 	.word	0x1a001e6c
1a001120:	40082000 	.word	0x40082000

1a001124 <Chip_UART_SetBaud>:
   return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001124:	b538      	push	{r3, r4, r5, lr}
1a001126:	4605      	mov	r5, r0
1a001128:	460c      	mov	r4, r1
   uint32_t div, divh, divl, clkin;

   /* Determine UART clock in rate without FDR */
   clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00112a:	f7ff ffbb 	bl	1a0010a4 <Chip_UART_GetIndex>
1a00112e:	4b0c      	ldr	r3, [pc, #48]	; (1a001160 <Chip_UART_SetBaud+0x3c>)
1a001130:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001134:	f7ff fcd4 	bl	1a000ae0 <Chip_Clock_GetRate>
   div = clkin / (baudrate * 16);
1a001138:	0123      	lsls	r3, r4, #4
1a00113a:	fbb0 f3f3 	udiv	r3, r0, r3
1a00113e:	b2d9      	uxtb	r1, r3
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a001140:	68ea      	ldr	r2, [r5, #12]
1a001142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001146:	60ea      	str	r2, [r5, #12]
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a001148:	6029      	str	r1, [r5, #0]
1a00114a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a00114e:	606a      	str	r2, [r5, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001150:	68ea      	ldr	r2, [r5, #12]
1a001152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001156:	60ea      	str	r2, [r5, #12]
   Chip_UART_DisableDivisorAccess(pUART);

   /* Fractional FDR alreadt setup for 1 in UART init */

   return clkin / div;
}
1a001158:	fbb0 f0f3 	udiv	r0, r0, r3
1a00115c:	bd38      	pop	{r3, r4, r5, pc}
1a00115e:	bf00      	nop
1a001160:	1a001e64 	.word	0x1a001e64

1a001164 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001168:	b083      	sub	sp, #12
1a00116a:	4683      	mov	fp, r0
1a00116c:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00116e:	f7ff ff99 	bl	1a0010a4 <Chip_UART_GetIndex>
1a001172:	4b35      	ldr	r3, [pc, #212]	; (1a001248 <Chip_UART_SetBaudFDR+0xe4>)
1a001174:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001178:	f7ff fcb2 	bl	1a000ae0 <Chip_Clock_GetRate>
1a00117c:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a00117e:	f04f 37ff 	mov.w	r7, #4294967295

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a001182:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a001184:	2300      	movs	r3, #0
1a001186:	9301      	str	r3, [sp, #4]
1a001188:	46a2      	mov	sl, r4
1a00118a:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a00118c:	e02a      	b.n	1a0011e4 <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a00118e:	4243      	negs	r3, r0
               div ++;
1a001190:	1c4a      	adds	r2, r1, #1
1a001192:	e017      	b.n	1a0011c4 <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a001194:	b30b      	cbz	r3, 1a0011da <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a001196:	461f      	mov	r7, r3
           sd = d;
1a001198:	9501      	str	r5, [sp, #4]
           sm = m;
1a00119a:	46a2      	mov	sl, r4
           sdiv = div;
1a00119c:	4691      	mov	r9, r2
       for (d = 0; d < m; d++) {
1a00119e:	3501      	adds	r5, #1
1a0011a0:	42ac      	cmp	r4, r5
1a0011a2:	d91e      	bls.n	1a0011e2 <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0011a4:	0933      	lsrs	r3, r6, #4
1a0011a6:	0730      	lsls	r0, r6, #28
1a0011a8:	fba4 0100 	umull	r0, r1, r4, r0
1a0011ac:	fb04 1103 	mla	r1, r4, r3, r1
1a0011b0:	1962      	adds	r2, r4, r5
1a0011b2:	fb08 f202 	mul.w	r2, r8, r2
1a0011b6:	2300      	movs	r3, #0
1a0011b8:	f000 fc64 	bl	1a001a84 <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a0011bc:	4603      	mov	r3, r0
           div = (uint32_t) (dval >> 32);
1a0011be:	460a      	mov	r2, r1
           if ((int)diff < 0) {
1a0011c0:	2800      	cmp	r0, #0
1a0011c2:	dbe4      	blt.n	1a00118e <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0011c4:	429f      	cmp	r7, r3
1a0011c6:	d3ea      	bcc.n	1a00119e <Chip_UART_SetBaudFDR+0x3a>
1a0011c8:	2a00      	cmp	r2, #0
1a0011ca:	d0e8      	beq.n	1a00119e <Chip_UART_SetBaudFDR+0x3a>
1a0011cc:	0c11      	lsrs	r1, r2, #16
1a0011ce:	d1e6      	bne.n	1a00119e <Chip_UART_SetBaudFDR+0x3a>
1a0011d0:	2a02      	cmp	r2, #2
1a0011d2:	d8df      	bhi.n	1a001194 <Chip_UART_SetBaudFDR+0x30>
1a0011d4:	2d00      	cmp	r5, #0
1a0011d6:	d1e2      	bne.n	1a00119e <Chip_UART_SetBaudFDR+0x3a>
1a0011d8:	e7dc      	b.n	1a001194 <Chip_UART_SetBaudFDR+0x30>
           odiff = diff;
1a0011da:	461f      	mov	r7, r3
           sd = d;
1a0011dc:	9501      	str	r5, [sp, #4]
           sm = m;
1a0011de:	46a2      	mov	sl, r4
           sdiv = div;
1a0011e0:	4691      	mov	r9, r2
   for (m = 1; odiff && m < 16; m++) {
1a0011e2:	3401      	adds	r4, #1
1a0011e4:	b11f      	cbz	r7, 1a0011ee <Chip_UART_SetBaudFDR+0x8a>
1a0011e6:	2c0f      	cmp	r4, #15
1a0011e8:	d801      	bhi.n	1a0011ee <Chip_UART_SetBaudFDR+0x8a>
1a0011ea:	2500      	movs	r5, #0
1a0011ec:	e7d8      	b.n	1a0011a0 <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a0011ee:	f1b9 0f00 	cmp.w	r9, #0
1a0011f2:	d024      	beq.n	1a00123e <Chip_UART_SetBaudFDR+0xda>
   pUART->LCR |= UART_LCR_DLAB_EN;
1a0011f4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0011fc:	f8cb 300c 	str.w	r3, [fp, #12]
1a001200:	fa5f f389 	uxtb.w	r3, r9
   pUART->DLL = (uint32_t) dll;
1a001204:	f8cb 3000 	str.w	r3, [fp]
1a001208:	f3c9 2307 	ubfx	r3, r9, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a00120c:	f8cb 3004 	str.w	r3, [fp, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001210:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001218:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00121c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001220:	b2db      	uxtb	r3, r3
1a001222:	9901      	ldr	r1, [sp, #4]
1a001224:	f001 020f 	and.w	r2, r1, #15
1a001228:	4313      	orrs	r3, r2
1a00122a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00122e:	0933      	lsrs	r3, r6, #4
1a001230:	fb03 f30a 	mul.w	r3, r3, sl
1a001234:	448a      	add	sl, r1
1a001236:	fb0a f909 	mul.w	r9, sl, r9
1a00123a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00123e:	4648      	mov	r0, r9
1a001240:	b003      	add	sp, #12
1a001242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001246:	bf00      	nop
1a001248:	1a001e64 	.word	0x1a001e64

1a00124c <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a00124c:	2200      	movs	r2, #0
1a00124e:	2a05      	cmp	r2, #5
1a001250:	d819      	bhi.n	1a001286 <Board_LED_Init+0x3a>
{
1a001252:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a001254:	490c      	ldr	r1, [pc, #48]	; (1a001288 <Board_LED_Init+0x3c>)
1a001256:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00125a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00125e:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a001260:	4b0a      	ldr	r3, [pc, #40]	; (1a00128c <Board_LED_Init+0x40>)
1a001262:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001266:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00126a:	2001      	movs	r0, #1
1a00126c:	40a0      	lsls	r0, r4
1a00126e:	4301      	orrs	r1, r0
1a001270:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a001274:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001278:	2100      	movs	r1, #0
1a00127a:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a00127c:	3201      	adds	r2, #1
1a00127e:	2a05      	cmp	r2, #5
1a001280:	d9e8      	bls.n	1a001254 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a001282:	bc70      	pop	{r4, r5, r6}
1a001284:	4770      	bx	lr
1a001286:	4770      	bx	lr
1a001288:	1a001e7c 	.word	0x1a001e7c
1a00128c:	400f4000 	.word	0x400f4000

1a001290 <Board_UART_Init>:
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001290:	4b03      	ldr	r3, [pc, #12]	; (1a0012a0 <Board_UART_Init+0x10>)
1a001292:	2212      	movs	r2, #18
1a001294:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a001298:	22d1      	movs	r2, #209	; 0xd1
1a00129a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a00129e:	4770      	bx	lr
1a0012a0:	40086000 	.word	0x40086000

1a0012a4 <Board_Debug_Init>:
{
1a0012a4:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a0012a6:	4c08      	ldr	r4, [pc, #32]	; (1a0012c8 <Board_Debug_Init+0x24>)
1a0012a8:	4620      	mov	r0, r4
1a0012aa:	f7ff fff1 	bl	1a001290 <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a0012ae:	4620      	mov	r0, r4
1a0012b0:	f7ff ff0e 	bl	1a0010d0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a0012b4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0012b8:	4620      	mov	r0, r4
1a0012ba:	f7ff ff53 	bl	1a001164 <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a0012be:	2303      	movs	r3, #3
1a0012c0:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0012c2:	2301      	movs	r3, #1
1a0012c4:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0012c6:	bd10      	pop	{r4, pc}
1a0012c8:	400c1000 	.word	0x400c1000

1a0012cc <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a0012cc:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a0012ce:	f7ff ffe9 	bl	1a0012a4 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a0012d2:	4806      	ldr	r0, [pc, #24]	; (1a0012ec <Board_Init+0x20>)
1a0012d4:	f7ff fc54 	bl	1a000b80 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a0012d8:	f7ff ffb8 	bl	1a00124c <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a0012dc:	4a04      	ldr	r2, [pc, #16]	; (1a0012f0 <Board_Init+0x24>)
1a0012de:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a0012e2:	f043 0304 	orr.w	r3, r3, #4
1a0012e6:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a0012ea:	bd08      	pop	{r3, pc}
1a0012ec:	400f4000 	.word	0x400f4000
1a0012f0:	40043000 	.word	0x40043000

1a0012f4 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0012f4:	2300      	movs	r3, #0
1a0012f6:	2b17      	cmp	r3, #23
1a0012f8:	d812      	bhi.n	1a001320 <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a0012fa:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0012fc:	4a09      	ldr	r2, [pc, #36]	; (1a001324 <Board_SetupMuxing+0x30>)
1a0012fe:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001302:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001306:	784a      	ldrb	r2, [r1, #1]
1a001308:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00130a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00130e:	4906      	ldr	r1, [pc, #24]	; (1a001328 <Board_SetupMuxing+0x34>)
1a001310:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a001314:	3301      	adds	r3, #1
1a001316:	2b17      	cmp	r3, #23
1a001318:	d9f0      	bls.n	1a0012fc <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00131a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00131e:	4770      	bx	lr
1a001320:	4770      	bx	lr
1a001322:	bf00      	nop
1a001324:	1a001e94 	.word	0x1a001e94
1a001328:	40086000 	.word	0x40086000

1a00132c <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a00132c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00132e:	4a17      	ldr	r2, [pc, #92]	; (1a00138c <Board_SetupClocking+0x60>)
1a001330:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001338:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00133c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001340:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001348:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00134c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001350:	2201      	movs	r2, #1
1a001352:	490f      	ldr	r1, [pc, #60]	; (1a001390 <Board_SetupClocking+0x64>)
1a001354:	2006      	movs	r0, #6
1a001356:	f7ff fdf9 	bl	1a000f4c <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00135a:	2400      	movs	r4, #0
1a00135c:	e00a      	b.n	1a001374 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00135e:	480d      	ldr	r0, [pc, #52]	; (1a001394 <Board_SetupClocking+0x68>)
1a001360:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001364:	78cb      	ldrb	r3, [r1, #3]
1a001366:	788a      	ldrb	r2, [r1, #2]
1a001368:	7849      	ldrb	r1, [r1, #1]
1a00136a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00136e:	f7ff fb39 	bl	1a0009e4 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001372:	3401      	adds	r4, #1
1a001374:	2c02      	cmp	r4, #2
1a001376:	d9f2      	bls.n	1a00135e <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001378:	4b04      	ldr	r3, [pc, #16]	; (1a00138c <Board_SetupClocking+0x60>)
1a00137a:	685a      	ldr	r2, [r3, #4]
1a00137c:	f022 020c 	bic.w	r2, r2, #12
1a001380:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001382:	685a      	ldr	r2, [r3, #4]
1a001384:	f042 0203 	orr.w	r2, r2, #3
1a001388:	605a      	str	r2, [r3, #4]
1a00138a:	bd10      	pop	{r4, pc}
1a00138c:	40043000 	.word	0x40043000
1a001390:	0c28cb00 	.word	0x0c28cb00
1a001394:	1a001e88 	.word	0x1a001e88

1a001398 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001398:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a00139a:	f7ff ffab 	bl	1a0012f4 <Board_SetupMuxing>
   Board_SetupClocking();
1a00139e:	f7ff ffc5 	bl	1a00132c <Board_SetupClocking>
1a0013a2:	bd08      	pop	{r3, pc}

1a0013a4 <ResetISR>:
void ResetISR(void) {
1a0013a4:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a0013a6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0013a8:	4a16      	ldr	r2, [pc, #88]	; (1a001404 <ResetISR+0x60>)
1a0013aa:	4b17      	ldr	r3, [pc, #92]	; (1a001408 <ResetISR+0x64>)
1a0013ac:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0013ae:	4a17      	ldr	r2, [pc, #92]	; (1a00140c <ResetISR+0x68>)
1a0013b0:	3304      	adds	r3, #4
1a0013b2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0013b4:	2300      	movs	r3, #0
1a0013b6:	e005      	b.n	1a0013c4 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0013b8:	f04f 31ff 	mov.w	r1, #4294967295
1a0013bc:	4a14      	ldr	r2, [pc, #80]	; (1a001410 <ResetISR+0x6c>)
1a0013be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0013c2:	3301      	adds	r3, #1
1a0013c4:	2b07      	cmp	r3, #7
1a0013c6:	d9f7      	bls.n	1a0013b8 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a0013c8:	b662      	cpsie	i
    SystemInit();
1a0013ca:	f000 f829 	bl	1a001420 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a0013ce:	4b11      	ldr	r3, [pc, #68]	; (1a001414 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0013d0:	e007      	b.n	1a0013e2 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a0013d2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0013d6:	689a      	ldr	r2, [r3, #8]
1a0013d8:	6859      	ldr	r1, [r3, #4]
1a0013da:	6818      	ldr	r0, [r3, #0]
1a0013dc:	f7fe fed6 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a0013e0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0013e2:	4a0d      	ldr	r2, [pc, #52]	; (1a001418 <ResetISR+0x74>)
1a0013e4:	4293      	cmp	r3, r2
1a0013e6:	d3f4      	bcc.n	1a0013d2 <ResetISR+0x2e>
1a0013e8:	e006      	b.n	1a0013f8 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a0013ea:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0013ec:	6859      	ldr	r1, [r3, #4]
1a0013ee:	f854 0b08 	ldr.w	r0, [r4], #8
1a0013f2:	f7fe feda 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a0013f6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0013f8:	4a08      	ldr	r2, [pc, #32]	; (1a00141c <ResetISR+0x78>)
1a0013fa:	4293      	cmp	r3, r2
1a0013fc:	d3f5      	bcc.n	1a0013ea <ResetISR+0x46>
    main();
1a0013fe:	f7fe ffc7 	bl	1a000390 <main>
1a001402:	e7fe      	b.n	1a001402 <ResetISR+0x5e>
1a001404:	10df1000 	.word	0x10df1000
1a001408:	40053100 	.word	0x40053100
1a00140c:	01dff7ff 	.word	0x01dff7ff
1a001410:	e000e280 	.word	0xe000e280
1a001414:	1a000114 	.word	0x1a000114
1a001418:	1a000150 	.word	0x1a000150
1a00141c:	1a000178 	.word	0x1a000178

1a001420 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a001420:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a001422:	f7ff fb83 	bl	1a000b2c <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a001426:	f7ff ffb7 	bl	1a001398 <Board_SystemInit>
1a00142a:	bd08      	pop	{r3, pc}

1a00142c <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a00142c:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a00142e:	f7ff f8b3 	bl	1a000598 <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a001432:	f7ff ff4b 	bl	1a0012cc <Board_Init>

   /* Inicializar el conteo de Ticks con resolución de 1ms, sin tickHook */
   tickConfig( 1, 0 );
1a001436:	2200      	movs	r2, #0
1a001438:	2001      	movs	r0, #1
1a00143a:	2100      	movs	r1, #0
1a00143c:	f000 f9f6 	bl	1a00182c <tickConfig>

   /* Inicializar GPIOs */
   gpioConfig( 0, GPIO_ENABLE );
1a001440:	2105      	movs	r1, #5
1a001442:	2000      	movs	r0, #0
1a001444:	f000 f886 	bl	1a001554 <gpioConfig>

   /* Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP */
   gpioConfig( TEC1, GPIO_INPUT );
1a001448:	2100      	movs	r1, #0
1a00144a:	2024      	movs	r0, #36	; 0x24
1a00144c:	f000 f882 	bl	1a001554 <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a001450:	2100      	movs	r1, #0
1a001452:	2025      	movs	r0, #37	; 0x25
1a001454:	f000 f87e 	bl	1a001554 <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a001458:	2100      	movs	r1, #0
1a00145a:	2026      	movs	r0, #38	; 0x26
1a00145c:	f000 f87a 	bl	1a001554 <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a001460:	2100      	movs	r1, #0
1a001462:	2027      	movs	r0, #39	; 0x27
1a001464:	f000 f876 	bl	1a001554 <gpioConfig>

   /* Configuración de pines de salida para Leds de la EDU-CIAA-NXP */
   gpioConfig( LEDR, GPIO_OUTPUT );
1a001468:	2101      	movs	r1, #1
1a00146a:	2028      	movs	r0, #40	; 0x28
1a00146c:	f000 f872 	bl	1a001554 <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a001470:	2101      	movs	r1, #1
1a001472:	2029      	movs	r0, #41	; 0x29
1a001474:	f000 f86e 	bl	1a001554 <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a001478:	2101      	movs	r1, #1
1a00147a:	202a      	movs	r0, #42	; 0x2a
1a00147c:	f000 f86a 	bl	1a001554 <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a001480:	2101      	movs	r1, #1
1a001482:	202b      	movs	r0, #43	; 0x2b
1a001484:	f000 f866 	bl	1a001554 <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a001488:	2101      	movs	r1, #1
1a00148a:	202c      	movs	r0, #44	; 0x2c
1a00148c:	f000 f862 	bl	1a001554 <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a001490:	2101      	movs	r1, #1
1a001492:	202d      	movs	r0, #45	; 0x2d
1a001494:	f000 f85e 	bl	1a001554 <gpioConfig>


   /* Configuración de pines de entrada de la CIAA-NXP */
   gpioConfig( DI0, GPIO_INPUT );
1a001498:	2100      	movs	r1, #0
1a00149a:	202e      	movs	r0, #46	; 0x2e
1a00149c:	f000 f85a 	bl	1a001554 <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a0014a0:	2100      	movs	r1, #0
1a0014a2:	202f      	movs	r0, #47	; 0x2f
1a0014a4:	f000 f856 	bl	1a001554 <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a0014a8:	2100      	movs	r1, #0
1a0014aa:	2030      	movs	r0, #48	; 0x30
1a0014ac:	f000 f852 	bl	1a001554 <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a0014b0:	2100      	movs	r1, #0
1a0014b2:	2031      	movs	r0, #49	; 0x31
1a0014b4:	f000 f84e 	bl	1a001554 <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a0014b8:	2100      	movs	r1, #0
1a0014ba:	2032      	movs	r0, #50	; 0x32
1a0014bc:	f000 f84a 	bl	1a001554 <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a0014c0:	2100      	movs	r1, #0
1a0014c2:	2033      	movs	r0, #51	; 0x33
1a0014c4:	f000 f846 	bl	1a001554 <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a0014c8:	2100      	movs	r1, #0
1a0014ca:	2034      	movs	r0, #52	; 0x34
1a0014cc:	f000 f842 	bl	1a001554 <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a0014d0:	2100      	movs	r1, #0
1a0014d2:	2035      	movs	r0, #53	; 0x35
1a0014d4:	f000 f83e 	bl	1a001554 <gpioConfig>

   /* Configuración de pines de salida de la CIAA-NXP */
   gpioConfig( DO0, GPIO_OUTPUT );
1a0014d8:	2101      	movs	r1, #1
1a0014da:	2036      	movs	r0, #54	; 0x36
1a0014dc:	f000 f83a 	bl	1a001554 <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a0014e0:	2101      	movs	r1, #1
1a0014e2:	2037      	movs	r0, #55	; 0x37
1a0014e4:	f000 f836 	bl	1a001554 <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a0014e8:	2101      	movs	r1, #1
1a0014ea:	2038      	movs	r0, #56	; 0x38
1a0014ec:	f000 f832 	bl	1a001554 <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a0014f0:	2101      	movs	r1, #1
1a0014f2:	2039      	movs	r0, #57	; 0x39
1a0014f4:	f000 f82e 	bl	1a001554 <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a0014f8:	2101      	movs	r1, #1
1a0014fa:	203a      	movs	r0, #58	; 0x3a
1a0014fc:	f000 f82a 	bl	1a001554 <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a001500:	2101      	movs	r1, #1
1a001502:	203b      	movs	r0, #59	; 0x3b
1a001504:	f000 f826 	bl	1a001554 <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a001508:	2101      	movs	r1, #1
1a00150a:	203c      	movs	r0, #60	; 0x3c
1a00150c:	f000 f822 	bl	1a001554 <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a001510:	2101      	movs	r1, #1
1a001512:	203d      	movs	r0, #61	; 0x3d
1a001514:	f000 f81e 	bl	1a001554 <gpioConfig>
1a001518:	bd08      	pop	{r3, pc}

1a00151a <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a00151a:	2001      	movs	r0, #1
1a00151c:	4770      	bx	lr
1a00151e:	Address 0x1a00151e is out of bounds.


1a001520 <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a001520:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a001522:	4d0b      	ldr	r5, [pc, #44]	; (1a001550 <gpioObtainPinConfig+0x30>)
1a001524:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001528:	182c      	adds	r4, r5, r0
1a00152a:	5628      	ldrsb	r0, [r5, r0]
1a00152c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a00152e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001532:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a001534:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001538:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a00153a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00153e:	9b02      	ldr	r3, [sp, #8]
1a001540:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a001542:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001546:	9b03      	ldr	r3, [sp, #12]
1a001548:	701a      	strb	r2, [r3, #0]
}
1a00154a:	bc30      	pop	{r4, r5}
1a00154c:	4770      	bx	lr
1a00154e:	bf00      	nop
1a001550:	1a001ef4 	.word	0x1a001ef4

1a001554 <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a001554:	b530      	push	{r4, r5, lr}
1a001556:	b085      	sub	sp, #20
1a001558:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00155a:	2300      	movs	r3, #0
1a00155c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001560:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001564:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001568:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00156c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001570:	f10d 030b 	add.w	r3, sp, #11
1a001574:	9301      	str	r3, [sp, #4]
1a001576:	ab03      	add	r3, sp, #12
1a001578:	9300      	str	r3, [sp, #0]
1a00157a:	f10d 030d 	add.w	r3, sp, #13
1a00157e:	f10d 020e 	add.w	r2, sp, #14
1a001582:	f10d 010f 	add.w	r1, sp, #15
1a001586:	f7ff ffcb 	bl	1a001520 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a00158a:	2c05      	cmp	r4, #5
1a00158c:	f200 8096 	bhi.w	1a0016bc <gpioConfig+0x168>
1a001590:	e8df f004 	tbb	[pc, r4]
1a001594:	3d237109 	.word	0x3d237109
1a001598:	0357      	.short	0x0357

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a00159a:	4849      	ldr	r0, [pc, #292]	; (1a0016c0 <gpioConfig+0x16c>)
1a00159c:	f7ff faf0 	bl	1a000b80 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0015a0:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0015a2:	b005      	add	sp, #20
1a0015a4:	bd30      	pop	{r4, r5, pc}
         Chip_SCU_PinMux(
1a0015a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0015aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0015ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a0015b2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0015b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0015ba:	4942      	ldr	r1, [pc, #264]	; (1a0016c4 <gpioConfig+0x170>)
1a0015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0015c0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0015c4:	2401      	movs	r4, #1
1a0015c6:	2300      	movs	r3, #0
1a0015c8:	fa04 f202 	lsl.w	r2, r4, r2
1a0015cc:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0015d0:	483b      	ldr	r0, [pc, #236]	; (1a0016c0 <gpioConfig+0x16c>)
1a0015d2:	f7ff fad6 	bl	1a000b82 <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a0015d6:	4620      	mov	r0, r4
      break;
1a0015d8:	e7e3      	b.n	1a0015a2 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a0015da:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0015de:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0015e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0015e6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0015ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0015ee:	4935      	ldr	r1, [pc, #212]	; (1a0016c4 <gpioConfig+0x170>)
1a0015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0015f4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0015f8:	2401      	movs	r4, #1
1a0015fa:	2300      	movs	r3, #0
1a0015fc:	fa04 f202 	lsl.w	r2, r4, r2
1a001600:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001604:	482e      	ldr	r0, [pc, #184]	; (1a0016c0 <gpioConfig+0x16c>)
1a001606:	f7ff fabc 	bl	1a000b82 <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a00160a:	4620      	mov	r0, r4
      break;
1a00160c:	e7c9      	b.n	1a0015a2 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a00160e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001612:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001616:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00161a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00161e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001622:	4928      	ldr	r1, [pc, #160]	; (1a0016c4 <gpioConfig+0x170>)
1a001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001628:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00162c:	2401      	movs	r4, #1
1a00162e:	2300      	movs	r3, #0
1a001630:	fa04 f202 	lsl.w	r2, r4, r2
1a001634:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001638:	4821      	ldr	r0, [pc, #132]	; (1a0016c0 <gpioConfig+0x16c>)
1a00163a:	f7ff faa2 	bl	1a000b82 <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a00163e:	4620      	mov	r0, r4
      break;
1a001640:	e7af      	b.n	1a0015a2 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a001642:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001646:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00164a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00164e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001652:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001656:	491b      	ldr	r1, [pc, #108]	; (1a0016c4 <gpioConfig+0x170>)
1a001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00165c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001660:	2401      	movs	r4, #1
1a001662:	2300      	movs	r3, #0
1a001664:	fa04 f202 	lsl.w	r2, r4, r2
1a001668:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00166c:	4814      	ldr	r0, [pc, #80]	; (1a0016c0 <gpioConfig+0x16c>)
1a00166e:	f7ff fa88 	bl	1a000b82 <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a001672:	4620      	mov	r0, r4
      break;
1a001674:	e795      	b.n	1a0015a2 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a001676:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00167a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00167e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001682:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001686:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00168a:	490e      	ldr	r1, [pc, #56]	; (1a0016c4 <gpioConfig+0x170>)
1a00168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001690:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001694:	2401      	movs	r4, #1
1a001696:	4d0a      	ldr	r5, [pc, #40]	; (1a0016c0 <gpioConfig+0x16c>)
1a001698:	4623      	mov	r3, r4
1a00169a:	fa04 f202 	lsl.w	r2, r4, r2
1a00169e:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0016a2:	4628      	mov	r0, r5
1a0016a4:	f7ff fa6d 	bl	1a000b82 <Chip_GPIO_SetDir>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0016a8:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a0016ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0016b0:	eb05 1542 	add.w	r5, r5, r2, lsl #5
1a0016b4:	2200      	movs	r2, #0
1a0016b6:	54ea      	strb	r2, [r5, r3]
   bool_t ret_val     = 1;
1a0016b8:	4620      	mov	r0, r4
1a0016ba:	e772      	b.n	1a0015a2 <gpioConfig+0x4e>
         ret_val = 0;
1a0016bc:	2000      	movs	r0, #0
1a0016be:	e770      	b.n	1a0015a2 <gpioConfig+0x4e>
1a0016c0:	400f4000 	.word	0x400f4000
1a0016c4:	40086000 	.word	0x40086000

1a0016c8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a0016c8:	b510      	push	{r4, lr}
1a0016ca:	b084      	sub	sp, #16
1a0016cc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0016ce:	2300      	movs	r3, #0
1a0016d0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0016d4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0016d8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0016dc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0016e0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a0016e4:	f10d 030b 	add.w	r3, sp, #11
1a0016e8:	9301      	str	r3, [sp, #4]
1a0016ea:	ab03      	add	r3, sp, #12
1a0016ec:	9300      	str	r3, [sp, #0]
1a0016ee:	f10d 030d 	add.w	r3, sp, #13
1a0016f2:	f10d 020e 	add.w	r2, sp, #14
1a0016f6:	f10d 010f 	add.w	r1, sp, #15
1a0016fa:	f7ff ff11 	bl	1a001520 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0016fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001702:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001706:	3400      	adds	r4, #0
1a001708:	bf18      	it	ne
1a00170a:	2401      	movne	r4, #1
1a00170c:	015b      	lsls	r3, r3, #5
1a00170e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001712:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001716:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a001718:	2001      	movs	r0, #1
1a00171a:	b004      	add	sp, #16
1a00171c:	bd10      	pop	{r4, pc}

1a00171e <gpioRead>:

   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin ){
1a00171e:	b500      	push	{lr}
1a001720:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001722:	2300      	movs	r3, #0
1a001724:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001728:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00172c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001730:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001734:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001738:	f10d 030b 	add.w	r3, sp, #11
1a00173c:	9301      	str	r3, [sp, #4]
1a00173e:	ab03      	add	r3, sp, #12
1a001740:	9300      	str	r3, [sp, #0]
1a001742:	f10d 030d 	add.w	r3, sp, #13
1a001746:	f10d 020e 	add.w	r2, sp, #14
1a00174a:	f10d 010f 	add.w	r1, sp, #15
1a00174e:	f7ff fee7 	bl	1a001520 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001752:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001756:	f89d 200b 	ldrb.w	r2, [sp, #11]
   return (bool) pGPIO->B[port][pin];
1a00175a:	015b      	lsls	r3, r3, #5
1a00175c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001760:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001764:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a001766:	3000      	adds	r0, #0
1a001768:	bf18      	it	ne
1a00176a:	2001      	movne	r0, #1
1a00176c:	b005      	add	sp, #20
1a00176e:	f85d fb04 	ldr.w	pc, [sp], #4

1a001772 <gpioToggle>:
bool_t gpioToggle( gpioMap_t pin ){
1a001772:	b510      	push	{r4, lr}
1a001774:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a001776:	f7ff ffd2 	bl	1a00171e <gpioRead>
1a00177a:	fab0 f180 	clz	r1, r0
1a00177e:	0949      	lsrs	r1, r1, #5
1a001780:	4620      	mov	r0, r4
1a001782:	f7ff ffa1 	bl	1a0016c8 <gpioWrite>
}
1a001786:	bd10      	pop	{r4, pc}

1a001788 <i2cHardwareConfig>:
      retVal = gpioRead( (int8_t)pin );
      return retVal;
   }
#else

   static bool_t i2cHardwareConfig( i2cMap_t i2cNumber, uint32_t clockRateHz ){
1a001788:	b538      	push	{r3, r4, r5, lr}
1a00178a:	4604      	mov	r4, r0
1a00178c:	460d      	mov	r5, r1
   LPC_SCU->SFSI2C0 = I2C0Mode;
1a00178e:	f640 0208 	movw	r2, #2056	; 0x808
1a001792:	4b07      	ldr	r3, [pc, #28]	; (1a0017b0 <i2cHardwareConfig+0x28>)
1a001794:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

      // Configuracion de las lineas de SDA y SCL de la placa
      Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

      // Inicializacion del periferico
      Chip_I2C_Init( i2cNumber );
1a001798:	f7ff faa8 	bl	1a000cec <Chip_I2C_Init>
      // Seleccion de velocidad del bus
      Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a00179c:	4629      	mov	r1, r5
1a00179e:	4620      	mov	r0, r4
1a0017a0:	f7ff fab6 	bl	1a000d10 <Chip_I2C_SetClockRate>
      // Configuracion para que los eventos se resuelvan por polliong
      // (la otra opcion es por interrupcion)
      Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0017a4:	4903      	ldr	r1, [pc, #12]	; (1a0017b4 <i2cHardwareConfig+0x2c>)
1a0017a6:	4620      	mov	r0, r4
1a0017a8:	f7ff face 	bl	1a000d48 <Chip_I2C_SetMasterEventHandler>

      return TRUE;
   }
1a0017ac:	2001      	movs	r0, #1
1a0017ae:	bd38      	pop	{r3, r4, r5, pc}
1a0017b0:	40086000 	.word	0x40086000
1a0017b4:	1a000dc5 	.word	0x1a000dc5

1a0017b8 <i2cHardwareRead>:
                                  uint8_t* dataToReadBuffer,
                                  uint16_t dataToReadBufferSize,
                                  bool_t   sendWriteStop,
                                  uint8_t* receiveDataBuffer,
                                  uint16_t receiveDataBufferSize,
                                  bool_t   sendReadStop ){
1a0017b8:	b500      	push	{lr}
1a0017ba:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

      I2CM_XFER_T i2cData;

      i2cData.slaveAddr = i2cSlaveAddress;
1a0017bc:	f88d 1000 	strb.w	r1, [sp]
      i2cData.options   = 0;
1a0017c0:	2100      	movs	r1, #0
1a0017c2:	f88d 1001 	strb.w	r1, [sp, #1]
      i2cData.status    = 0;
1a0017c6:	f8ad 1002 	strh.w	r1, [sp, #2]
      i2cData.txBuff    = dataToReadBuffer;
1a0017ca:	9202      	str	r2, [sp, #8]
      i2cData.txSz      = dataToReadBufferSize;
1a0017cc:	f8ad 3004 	strh.w	r3, [sp, #4]
      i2cData.rxBuff    = receiveDataBuffer;
1a0017d0:	9b07      	ldr	r3, [sp, #28]
1a0017d2:	9303      	str	r3, [sp, #12]
      i2cData.rxSz      = receiveDataBufferSize;
1a0017d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a0017d8:	f8ad 3006 	strh.w	r3, [sp, #6]

      if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0017dc:	4669      	mov	r1, sp
1a0017de:	4804      	ldr	r0, [pc, #16]	; (1a0017f0 <i2cHardwareRead+0x38>)
1a0017e0:	f7ff fba2 	bl	1a000f28 <Chip_I2CM_XferBlocking>
1a0017e4:	b100      	cbz	r0, 1a0017e8 <i2cHardwareRead+0x30>
         return FALSE;
      }

      return TRUE;
1a0017e6:	2001      	movs	r0, #1
   }
1a0017e8:	b005      	add	sp, #20
1a0017ea:	f85d fb04 	ldr.w	pc, [sp], #4
1a0017ee:	bf00      	nop
1a0017f0:	400a1000 	.word	0x400a1000

1a0017f4 <i2cConfig>:

bool_t i2cConfig( i2cMap_t i2cNumber, uint32_t clockRateHz ){

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ){
1a0017f4:	b108      	cbz	r0, 1a0017fa <i2cConfig+0x6>
      return FALSE;
1a0017f6:	2000      	movs	r0, #0
1a0017f8:	4770      	bx	lr
bool_t i2cConfig( i2cMap_t i2cNumber, uint32_t clockRateHz ){
1a0017fa:	b508      	push	{r3, lr}
   }

   #if( I2C_SOFTWARE == 1 )
      retVal = i2cSoftwareConfig( i2cNumber, clockRateHz );
   #else
      retVal = i2cHardwareConfig( i2cNumber, clockRateHz );
1a0017fc:	f7ff ffc4 	bl	1a001788 <i2cHardwareConfig>
   #endif

   return retVal;
1a001800:	bd08      	pop	{r3, pc}

1a001802 <i2cRead>:
                uint16_t receiveDataBufferSize,
                bool_t   sendReadStop ){

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ){
1a001802:	b108      	cbz	r0, 1a001808 <i2cRead+0x6>
      return FALSE;
1a001804:	2000      	movs	r0, #0
1a001806:	4770      	bx	lr
                bool_t   sendReadStop ){
1a001808:	b510      	push	{r4, lr}
1a00180a:	b084      	sub	sp, #16
                                sendWriteStop,
                                receiveDataBuffer,
                                receiveDataBufferSize,
                                sendReadStop );
   #else
      retVal = i2cHardwareRead( i2cNumber,
1a00180c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a001810:	9403      	str	r4, [sp, #12]
1a001812:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a001816:	9402      	str	r4, [sp, #8]
1a001818:	9c07      	ldr	r4, [sp, #28]
1a00181a:	9401      	str	r4, [sp, #4]
1a00181c:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a001820:	9400      	str	r4, [sp, #0]
1a001822:	f7ff ffc9 	bl	1a0017b8 <i2cHardwareRead>
                                receiveDataBufferSize,
                                sendReadStop );
   #endif

   return retVal;
}
1a001826:	b004      	add	sp, #16
1a001828:	bd10      	pop	{r4, pc}
1a00182a:	Address 0x1a00182a is out of bounds.


1a00182c <tickConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig(tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {
1a00182c:	b508      	push	{r3, lr}

   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ){
1a00182e:	b112      	cbz	r2, 1a001836 <tickConfig+0xa>
1a001830:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a001832:	4a17      	ldr	r2, [pc, #92]	; (1a001890 <tickConfig+0x64>)
1a001834:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ){
1a001836:	f110 32ff 	adds.w	r2, r0, #4294967295
1a00183a:	f141 33ff 	adc.w	r3, r1, #4294967295
1a00183e:	2b00      	cmp	r3, #0
1a001840:	bf08      	it	eq
1a001842:	2a32      	cmpeq	r2, #50	; 0x32
1a001844:	d220      	bcs.n	1a001888 <tickConfig+0x5c>
1a001846:	4602      	mov	r2, r0
1a001848:	460b      	mov	r3, r1

		tickRateMS = tickRateMSvalue;
1a00184a:	4912      	ldr	r1, [pc, #72]	; (1a001894 <tickConfig+0x68>)
1a00184c:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a001850:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001854:	2100      	movs	r1, #0
1a001856:	f000 f915 	bl	1a001a84 <__aeabi_uldivmod>

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a00185a:	4602      	mov	r2, r0
1a00185c:	460b      	mov	r3, r1
1a00185e:	490e      	ldr	r1, [pc, #56]	; (1a001898 <tickConfig+0x6c>)
1a001860:	6808      	ldr	r0, [r1, #0]
1a001862:	2100      	movs	r1, #0
1a001864:	f000 f90e 	bl	1a001a84 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a001868:	3801      	subs	r0, #1
1a00186a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00186e:	d20d      	bcs.n	1a00188c <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a001870:	4b0a      	ldr	r3, [pc, #40]	; (1a00189c <tickConfig+0x70>)
1a001872:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a001874:	21e0      	movs	r1, #224	; 0xe0
1a001876:	4a0a      	ldr	r2, [pc, #40]	; (1a0018a0 <tickConfig+0x74>)
1a001878:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a00187c:	2200      	movs	r2, #0
1a00187e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001880:	2207      	movs	r2, #7
1a001882:	601a      	str	r2, [r3, #0]
   bool_t ret_val = 1;
1a001884:	2001      	movs	r0, #1
1a001886:	bd08      	pop	{r3, pc}
   }
   else{
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a001888:	2000      	movs	r0, #0
1a00188a:	bd08      	pop	{r3, pc}
   bool_t ret_val = 1;
1a00188c:	2001      	movs	r0, #1
   }

   return ret_val;
}
1a00188e:	bd08      	pop	{r3, pc}
1a001890:	10000040 	.word	0x10000040
1a001894:	100000a0 	.word	0x100000a0
1a001898:	10000090 	.word	0x10000090
1a00189c:	e000e010 	.word	0xe000e010
1a0018a0:	e000ed00 	.word	0xe000ed00

1a0018a4 <SysTick_Handler>:
/*==================[ISR external functions definition]======================*/

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void SysTick_Handler(void) {
1a0018a4:	b508      	push	{r3, lr}
   tickCounter++;
1a0018a6:	4906      	ldr	r1, [pc, #24]	; (1a0018c0 <SysTick_Handler+0x1c>)
1a0018a8:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0018ac:	3201      	adds	r2, #1
1a0018ae:	f143 0300 	adc.w	r3, r3, #0
1a0018b2:	e9c1 2300 	strd	r2, r3, [r1]

	/* Execute Tick Hook function */
	(* tickHookFunction )( 0 );
1a0018b6:	4b03      	ldr	r3, [pc, #12]	; (1a0018c4 <SysTick_Handler+0x20>)
1a0018b8:	681b      	ldr	r3, [r3, #0]
1a0018ba:	2000      	movs	r0, #0
1a0018bc:	4798      	blx	r3
1a0018be:	bd08      	pop	{r3, pc}
1a0018c0:	10000098 	.word	0x10000098
1a0018c4:	10000040 	.word	0x10000040

1a0018c8 <errorOcurred>:
/*==================[internal functions definition]==========================*/

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred(void){
1a0018c8:	e7fe      	b.n	1a0018c8 <errorOcurred>

1a0018ca <doNothing>:
   while(1);
}

static void doNothing(void){
1a0018ca:	4770      	bx	lr

1a0018cc <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void){
1a0018cc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018ce:	2400      	movs	r4, #0
1a0018d0:	e001      	b.n	1a0018d6 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0018d2:	3401      	adds	r4, #1
1a0018d4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018d6:	2c03      	cmp	r4, #3
1a0018d8:	d812      	bhi.n	1a001900 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ){
1a0018da:	b265      	sxtb	r5, r4
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0018dc:	4b09      	ldr	r3, [pc, #36]	; (1a001904 <TIMER0_IRQHandler+0x38>)
1a0018de:	681a      	ldr	r2, [r3, #0]
1a0018e0:	f004 010f 	and.w	r1, r4, #15
1a0018e4:	2301      	movs	r3, #1
1a0018e6:	408b      	lsls	r3, r1
1a0018e8:	421a      	tst	r2, r3
1a0018ea:	d0f2      	beq.n	1a0018d2 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a0018ec:	4b06      	ldr	r3, [pc, #24]	; (1a001908 <TIMER0_IRQHandler+0x3c>)
1a0018ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0018f2:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018f4:	2301      	movs	r3, #1
1a0018f6:	fa03 f505 	lsl.w	r5, r3, r5
1a0018fa:	4b02      	ldr	r3, [pc, #8]	; (1a001904 <TIMER0_IRQHandler+0x38>)
1a0018fc:	601d      	str	r5, [r3, #0]
1a0018fe:	e7e8      	b.n	1a0018d2 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001900:	bd38      	pop	{r3, r4, r5, pc}
1a001902:	bf00      	nop
1a001904:	40084000 	.word	0x40084000
1a001908:	10000044 	.word	0x10000044

1a00190c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a00190c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00190e:	2400      	movs	r4, #0
1a001910:	e001      	b.n	1a001916 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a001912:	3401      	adds	r4, #1
1a001914:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001916:	2c03      	cmp	r4, #3
1a001918:	d813      	bhi.n	1a001942 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ){
1a00191a:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00191c:	4b09      	ldr	r3, [pc, #36]	; (1a001944 <TIMER1_IRQHandler+0x38>)
1a00191e:	681a      	ldr	r2, [r3, #0]
1a001920:	f004 010f 	and.w	r1, r4, #15
1a001924:	2301      	movs	r3, #1
1a001926:	408b      	lsls	r3, r1
1a001928:	421a      	tst	r2, r3
1a00192a:	d0f2      	beq.n	1a001912 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a00192c:	1d23      	adds	r3, r4, #4
1a00192e:	4a06      	ldr	r2, [pc, #24]	; (1a001948 <TIMER1_IRQHandler+0x3c>)
1a001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001934:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a001936:	2301      	movs	r3, #1
1a001938:	fa03 f505 	lsl.w	r5, r3, r5
1a00193c:	4b01      	ldr	r3, [pc, #4]	; (1a001944 <TIMER1_IRQHandler+0x38>)
1a00193e:	601d      	str	r5, [r3, #0]
1a001940:	e7e7      	b.n	1a001912 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001942:	bd38      	pop	{r3, r4, r5, pc}
1a001944:	40085000 	.word	0x40085000
1a001948:	10000044 	.word	0x10000044

1a00194c <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a00194c:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00194e:	2400      	movs	r4, #0
1a001950:	e001      	b.n	1a001956 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a001952:	3401      	adds	r4, #1
1a001954:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001956:	2c03      	cmp	r4, #3
1a001958:	d814      	bhi.n	1a001984 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ){
1a00195a:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00195c:	4b0a      	ldr	r3, [pc, #40]	; (1a001988 <TIMER2_IRQHandler+0x3c>)
1a00195e:	681a      	ldr	r2, [r3, #0]
1a001960:	f004 010f 	and.w	r1, r4, #15
1a001964:	2301      	movs	r3, #1
1a001966:	408b      	lsls	r3, r1
1a001968:	421a      	tst	r2, r3
1a00196a:	d0f2      	beq.n	1a001952 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a00196c:	f104 0308 	add.w	r3, r4, #8
1a001970:	4a06      	ldr	r2, [pc, #24]	; (1a00198c <TIMER2_IRQHandler+0x40>)
1a001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001976:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a001978:	2301      	movs	r3, #1
1a00197a:	fa03 f505 	lsl.w	r5, r3, r5
1a00197e:	4b02      	ldr	r3, [pc, #8]	; (1a001988 <TIMER2_IRQHandler+0x3c>)
1a001980:	601d      	str	r5, [r3, #0]
1a001982:	e7e6      	b.n	1a001952 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001984:	bd38      	pop	{r3, r4, r5, pc}
1a001986:	bf00      	nop
1a001988:	400c3000 	.word	0x400c3000
1a00198c:	10000044 	.word	0x10000044

1a001990 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){
1a001990:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001992:	2400      	movs	r4, #0
1a001994:	e001      	b.n	1a00199a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a001996:	3401      	adds	r4, #1
1a001998:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00199a:	2c03      	cmp	r4, #3
1a00199c:	d814      	bhi.n	1a0019c8 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)){
1a00199e:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0019a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0019cc <TIMER3_IRQHandler+0x3c>)
1a0019a2:	681a      	ldr	r2, [r3, #0]
1a0019a4:	f004 010f 	and.w	r1, r4, #15
1a0019a8:	2301      	movs	r3, #1
1a0019aa:	408b      	lsls	r3, r1
1a0019ac:	421a      	tst	r2, r3
1a0019ae:	d0f2      	beq.n	1a001996 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a0019b0:	f104 030c 	add.w	r3, r4, #12
1a0019b4:	4a06      	ldr	r2, [pc, #24]	; (1a0019d0 <TIMER3_IRQHandler+0x40>)
1a0019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0019ba:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a0019bc:	2301      	movs	r3, #1
1a0019be:	fa03 f505 	lsl.w	r5, r3, r5
1a0019c2:	4b02      	ldr	r3, [pc, #8]	; (1a0019cc <TIMER3_IRQHandler+0x3c>)
1a0019c4:	601d      	str	r5, [r3, #0]
1a0019c6:	e7e6      	b.n	1a001996 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0019c8:	bd38      	pop	{r3, r4, r5, pc}
1a0019ca:	bf00      	nop
1a0019cc:	400c4000 	.word	0x400c4000
1a0019d0:	10000044 	.word	0x10000044

1a0019d4 <uartConfig>:
void uartConfig( uartMap_t uart, uint32_t baudRate ){
1a0019d4:	b538      	push	{r3, r4, r5, lr}
1a0019d6:	460c      	mov	r4, r1
   switch(uart){
1a0019d8:	b110      	cbz	r0, 1a0019e0 <uartConfig+0xc>
1a0019da:	2801      	cmp	r0, #1
1a0019dc:	d013      	beq.n	1a001a06 <uartConfig+0x32>
1a0019de:	bd38      	pop	{r3, r4, r5, pc}
      Chip_UART_Init(UART_USB_LPC);
1a0019e0:	4d12      	ldr	r5, [pc, #72]	; (1a001a2c <uartConfig+0x58>)
1a0019e2:	4628      	mov	r0, r5
1a0019e4:	f7ff fb74 	bl	1a0010d0 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_USB_LPC, baudRate);  /* Set Baud rate */
1a0019e8:	4621      	mov	r1, r4
1a0019ea:	4628      	mov	r0, r5
1a0019ec:	f7ff fb9a 	bl	1a001124 <Chip_UART_SetBaud>
   pUART->FCR = fcr;
1a0019f0:	2301      	movs	r3, #1
1a0019f2:	60ab      	str	r3, [r5, #8]
    pUART->TER2 = UART_TER2_TXEN;
1a0019f4:	65eb      	str	r3, [r5, #92]	; 0x5c
   LPC_SCU->SFSP[port][pin] = modefunc;
1a0019f6:	4b0e      	ldr	r3, [pc, #56]	; (1a001a30 <uartConfig+0x5c>)
1a0019f8:	221e      	movs	r2, #30
1a0019fa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
1a0019fe:	22d6      	movs	r2, #214	; 0xd6
1a001a00:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
1a001a04:	bd38      	pop	{r3, r4, r5, pc}
      Chip_UART_Init(UART_232_LPC);
1a001a06:	4d0b      	ldr	r5, [pc, #44]	; (1a001a34 <uartConfig+0x60>)
1a001a08:	4628      	mov	r0, r5
1a001a0a:	f7ff fb61 	bl	1a0010d0 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_232_LPC, baudRate);  /* Set Baud rate */
1a001a0e:	4621      	mov	r1, r4
1a001a10:	4628      	mov	r0, r5
1a001a12:	f7ff fb87 	bl	1a001124 <Chip_UART_SetBaud>
   pUART->FCR = fcr;
1a001a16:	2301      	movs	r3, #1
1a001a18:	60ab      	str	r3, [r5, #8]
    pUART->TER2 = UART_TER2_TXEN;
1a001a1a:	65eb      	str	r3, [r5, #92]	; 0x5c
1a001a1c:	4b04      	ldr	r3, [pc, #16]	; (1a001a30 <uartConfig+0x5c>)
1a001a1e:	221a      	movs	r2, #26
1a001a20:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a001a24:	22d2      	movs	r2, #210	; 0xd2
1a001a26:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a001a2a:	bd38      	pop	{r3, r4, r5, pc}
1a001a2c:	400c1000 	.word	0x400c1000
1a001a30:	40086000 	.word	0x40086000
1a001a34:	400c2000 	.word	0x400c2000

1a001a38 <uartWriteByte>:
   switch(uart){
1a001a38:	b110      	cbz	r0, 1a001a40 <uartWriteByte+0x8>
1a001a3a:	2801      	cmp	r0, #1
1a001a3c:	d008      	beq.n	1a001a50 <uartWriteByte+0x18>
1a001a3e:	4770      	bx	lr
 * @note   Mask bits of the returned status value with UART_LSR_*
 *         definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
   return pUART->LSR;
1a001a40:	4b07      	ldr	r3, [pc, #28]	; (1a001a60 <uartWriteByte+0x28>)
1a001a42:	695b      	ldr	r3, [r3, #20]
      while ((Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a001a44:	f013 0f20 	tst.w	r3, #32
1a001a48:	d0fa      	beq.n	1a001a40 <uartWriteByte+0x8>
   pUART->THR = (uint32_t) data;
1a001a4a:	4b05      	ldr	r3, [pc, #20]	; (1a001a60 <uartWriteByte+0x28>)
1a001a4c:	6019      	str	r1, [r3, #0]
1a001a4e:	4770      	bx	lr
   return pUART->LSR;
1a001a50:	4b04      	ldr	r3, [pc, #16]	; (1a001a64 <uartWriteByte+0x2c>)
1a001a52:	695b      	ldr	r3, [r3, #20]
      while ((Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a001a54:	f013 0f20 	tst.w	r3, #32
1a001a58:	d0fa      	beq.n	1a001a50 <uartWriteByte+0x18>
   pUART->THR = (uint32_t) data;
1a001a5a:	4b02      	ldr	r3, [pc, #8]	; (1a001a64 <uartWriteByte+0x2c>)
1a001a5c:	6019      	str	r1, [r3, #0]
1a001a5e:	4770      	bx	lr
1a001a60:	400c1000 	.word	0x400c1000
1a001a64:	400c2000 	.word	0x400c2000

1a001a68 <uartWriteString>:
void uartWriteString( uartMap_t uart, char* str ){
1a001a68:	b538      	push	{r3, r4, r5, lr}
1a001a6a:	4605      	mov	r5, r0
1a001a6c:	460c      	mov	r4, r1
   while(*str != 0){
1a001a6e:	e003      	b.n	1a001a78 <uartWriteString+0x10>
	  uartWriteByte( uart, (uint8_t)*str );
1a001a70:	4628      	mov	r0, r5
1a001a72:	f7ff ffe1 	bl	1a001a38 <uartWriteByte>
	  str++;
1a001a76:	3401      	adds	r4, #1
   while(*str != 0){
1a001a78:	7821      	ldrb	r1, [r4, #0]
1a001a7a:	2900      	cmp	r1, #0
1a001a7c:	d1f8      	bne.n	1a001a70 <uartWriteString+0x8>
}
1a001a7e:	bd38      	pop	{r3, r4, r5, pc}

1a001a80 <UART2_IRQHandler>:
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a001a80:	4770      	bx	lr

1a001a82 <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a001a82:	4770      	bx	lr

1a001a84 <__aeabi_uldivmod>:
1a001a84:	b953      	cbnz	r3, 1a001a9c <__aeabi_uldivmod+0x18>
1a001a86:	b94a      	cbnz	r2, 1a001a9c <__aeabi_uldivmod+0x18>
1a001a88:	2900      	cmp	r1, #0
1a001a8a:	bf08      	it	eq
1a001a8c:	2800      	cmpeq	r0, #0
1a001a8e:	bf1c      	itt	ne
1a001a90:	f04f 31ff 	movne.w	r1, #4294967295
1a001a94:	f04f 30ff 	movne.w	r0, #4294967295
1a001a98:	f000 b97a 	b.w	1a001d90 <__aeabi_idiv0>
1a001a9c:	f1ad 0c08 	sub.w	ip, sp, #8
1a001aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001aa4:	f000 f806 	bl	1a001ab4 <__udivmoddi4>
1a001aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001ab0:	b004      	add	sp, #16
1a001ab2:	4770      	bx	lr

1a001ab4 <__udivmoddi4>:
1a001ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001ab8:	468c      	mov	ip, r1
1a001aba:	460d      	mov	r5, r1
1a001abc:	4604      	mov	r4, r0
1a001abe:	9e08      	ldr	r6, [sp, #32]
1a001ac0:	2b00      	cmp	r3, #0
1a001ac2:	d151      	bne.n	1a001b68 <__udivmoddi4+0xb4>
1a001ac4:	428a      	cmp	r2, r1
1a001ac6:	4617      	mov	r7, r2
1a001ac8:	d96d      	bls.n	1a001ba6 <__udivmoddi4+0xf2>
1a001aca:	fab2 fe82 	clz	lr, r2
1a001ace:	f1be 0f00 	cmp.w	lr, #0
1a001ad2:	d00b      	beq.n	1a001aec <__udivmoddi4+0x38>
1a001ad4:	f1ce 0c20 	rsb	ip, lr, #32
1a001ad8:	fa01 f50e 	lsl.w	r5, r1, lr
1a001adc:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001ae0:	fa02 f70e 	lsl.w	r7, r2, lr
1a001ae4:	ea4c 0c05 	orr.w	ip, ip, r5
1a001ae8:	fa00 f40e 	lsl.w	r4, r0, lr
1a001aec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a001af0:	0c25      	lsrs	r5, r4, #16
1a001af2:	fbbc f8fa 	udiv	r8, ip, sl
1a001af6:	fa1f f987 	uxth.w	r9, r7
1a001afa:	fb0a cc18 	mls	ip, sl, r8, ip
1a001afe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a001b02:	fb08 f309 	mul.w	r3, r8, r9
1a001b06:	42ab      	cmp	r3, r5
1a001b08:	d90a      	bls.n	1a001b20 <__udivmoddi4+0x6c>
1a001b0a:	19ed      	adds	r5, r5, r7
1a001b0c:	f108 32ff 	add.w	r2, r8, #4294967295
1a001b10:	f080 8123 	bcs.w	1a001d5a <__udivmoddi4+0x2a6>
1a001b14:	42ab      	cmp	r3, r5
1a001b16:	f240 8120 	bls.w	1a001d5a <__udivmoddi4+0x2a6>
1a001b1a:	f1a8 0802 	sub.w	r8, r8, #2
1a001b1e:	443d      	add	r5, r7
1a001b20:	1aed      	subs	r5, r5, r3
1a001b22:	b2a4      	uxth	r4, r4
1a001b24:	fbb5 f0fa 	udiv	r0, r5, sl
1a001b28:	fb0a 5510 	mls	r5, sl, r0, r5
1a001b2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a001b30:	fb00 f909 	mul.w	r9, r0, r9
1a001b34:	45a1      	cmp	r9, r4
1a001b36:	d909      	bls.n	1a001b4c <__udivmoddi4+0x98>
1a001b38:	19e4      	adds	r4, r4, r7
1a001b3a:	f100 33ff 	add.w	r3, r0, #4294967295
1a001b3e:	f080 810a 	bcs.w	1a001d56 <__udivmoddi4+0x2a2>
1a001b42:	45a1      	cmp	r9, r4
1a001b44:	f240 8107 	bls.w	1a001d56 <__udivmoddi4+0x2a2>
1a001b48:	3802      	subs	r0, #2
1a001b4a:	443c      	add	r4, r7
1a001b4c:	eba4 0409 	sub.w	r4, r4, r9
1a001b50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001b54:	2100      	movs	r1, #0
1a001b56:	2e00      	cmp	r6, #0
1a001b58:	d061      	beq.n	1a001c1e <__udivmoddi4+0x16a>
1a001b5a:	fa24 f40e 	lsr.w	r4, r4, lr
1a001b5e:	2300      	movs	r3, #0
1a001b60:	6034      	str	r4, [r6, #0]
1a001b62:	6073      	str	r3, [r6, #4]
1a001b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001b68:	428b      	cmp	r3, r1
1a001b6a:	d907      	bls.n	1a001b7c <__udivmoddi4+0xc8>
1a001b6c:	2e00      	cmp	r6, #0
1a001b6e:	d054      	beq.n	1a001c1a <__udivmoddi4+0x166>
1a001b70:	2100      	movs	r1, #0
1a001b72:	e886 0021 	stmia.w	r6, {r0, r5}
1a001b76:	4608      	mov	r0, r1
1a001b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001b7c:	fab3 f183 	clz	r1, r3
1a001b80:	2900      	cmp	r1, #0
1a001b82:	f040 808e 	bne.w	1a001ca2 <__udivmoddi4+0x1ee>
1a001b86:	42ab      	cmp	r3, r5
1a001b88:	d302      	bcc.n	1a001b90 <__udivmoddi4+0xdc>
1a001b8a:	4282      	cmp	r2, r0
1a001b8c:	f200 80fa 	bhi.w	1a001d84 <__udivmoddi4+0x2d0>
1a001b90:	1a84      	subs	r4, r0, r2
1a001b92:	eb65 0503 	sbc.w	r5, r5, r3
1a001b96:	2001      	movs	r0, #1
1a001b98:	46ac      	mov	ip, r5
1a001b9a:	2e00      	cmp	r6, #0
1a001b9c:	d03f      	beq.n	1a001c1e <__udivmoddi4+0x16a>
1a001b9e:	e886 1010 	stmia.w	r6, {r4, ip}
1a001ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ba6:	b912      	cbnz	r2, 1a001bae <__udivmoddi4+0xfa>
1a001ba8:	2701      	movs	r7, #1
1a001baa:	fbb7 f7f2 	udiv	r7, r7, r2
1a001bae:	fab7 fe87 	clz	lr, r7
1a001bb2:	f1be 0f00 	cmp.w	lr, #0
1a001bb6:	d134      	bne.n	1a001c22 <__udivmoddi4+0x16e>
1a001bb8:	1beb      	subs	r3, r5, r7
1a001bba:	0c3a      	lsrs	r2, r7, #16
1a001bbc:	fa1f fc87 	uxth.w	ip, r7
1a001bc0:	2101      	movs	r1, #1
1a001bc2:	fbb3 f8f2 	udiv	r8, r3, r2
1a001bc6:	0c25      	lsrs	r5, r4, #16
1a001bc8:	fb02 3318 	mls	r3, r2, r8, r3
1a001bcc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a001bd0:	fb0c f308 	mul.w	r3, ip, r8
1a001bd4:	42ab      	cmp	r3, r5
1a001bd6:	d907      	bls.n	1a001be8 <__udivmoddi4+0x134>
1a001bd8:	19ed      	adds	r5, r5, r7
1a001bda:	f108 30ff 	add.w	r0, r8, #4294967295
1a001bde:	d202      	bcs.n	1a001be6 <__udivmoddi4+0x132>
1a001be0:	42ab      	cmp	r3, r5
1a001be2:	f200 80d1 	bhi.w	1a001d88 <__udivmoddi4+0x2d4>
1a001be6:	4680      	mov	r8, r0
1a001be8:	1aed      	subs	r5, r5, r3
1a001bea:	b2a3      	uxth	r3, r4
1a001bec:	fbb5 f0f2 	udiv	r0, r5, r2
1a001bf0:	fb02 5510 	mls	r5, r2, r0, r5
1a001bf4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a001bf8:	fb0c fc00 	mul.w	ip, ip, r0
1a001bfc:	45a4      	cmp	ip, r4
1a001bfe:	d907      	bls.n	1a001c10 <__udivmoddi4+0x15c>
1a001c00:	19e4      	adds	r4, r4, r7
1a001c02:	f100 33ff 	add.w	r3, r0, #4294967295
1a001c06:	d202      	bcs.n	1a001c0e <__udivmoddi4+0x15a>
1a001c08:	45a4      	cmp	ip, r4
1a001c0a:	f200 80b8 	bhi.w	1a001d7e <__udivmoddi4+0x2ca>
1a001c0e:	4618      	mov	r0, r3
1a001c10:	eba4 040c 	sub.w	r4, r4, ip
1a001c14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001c18:	e79d      	b.n	1a001b56 <__udivmoddi4+0xa2>
1a001c1a:	4631      	mov	r1, r6
1a001c1c:	4630      	mov	r0, r6
1a001c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001c22:	f1ce 0420 	rsb	r4, lr, #32
1a001c26:	fa05 f30e 	lsl.w	r3, r5, lr
1a001c2a:	fa07 f70e 	lsl.w	r7, r7, lr
1a001c2e:	fa20 f804 	lsr.w	r8, r0, r4
1a001c32:	0c3a      	lsrs	r2, r7, #16
1a001c34:	fa25 f404 	lsr.w	r4, r5, r4
1a001c38:	ea48 0803 	orr.w	r8, r8, r3
1a001c3c:	fbb4 f1f2 	udiv	r1, r4, r2
1a001c40:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a001c44:	fb02 4411 	mls	r4, r2, r1, r4
1a001c48:	fa1f fc87 	uxth.w	ip, r7
1a001c4c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a001c50:	fb01 f30c 	mul.w	r3, r1, ip
1a001c54:	42ab      	cmp	r3, r5
1a001c56:	fa00 f40e 	lsl.w	r4, r0, lr
1a001c5a:	d909      	bls.n	1a001c70 <__udivmoddi4+0x1bc>
1a001c5c:	19ed      	adds	r5, r5, r7
1a001c5e:	f101 30ff 	add.w	r0, r1, #4294967295
1a001c62:	f080 808a 	bcs.w	1a001d7a <__udivmoddi4+0x2c6>
1a001c66:	42ab      	cmp	r3, r5
1a001c68:	f240 8087 	bls.w	1a001d7a <__udivmoddi4+0x2c6>
1a001c6c:	3902      	subs	r1, #2
1a001c6e:	443d      	add	r5, r7
1a001c70:	1aeb      	subs	r3, r5, r3
1a001c72:	fa1f f588 	uxth.w	r5, r8
1a001c76:	fbb3 f0f2 	udiv	r0, r3, r2
1a001c7a:	fb02 3310 	mls	r3, r2, r0, r3
1a001c7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a001c82:	fb00 f30c 	mul.w	r3, r0, ip
1a001c86:	42ab      	cmp	r3, r5
1a001c88:	d907      	bls.n	1a001c9a <__udivmoddi4+0x1e6>
1a001c8a:	19ed      	adds	r5, r5, r7
1a001c8c:	f100 38ff 	add.w	r8, r0, #4294967295
1a001c90:	d26f      	bcs.n	1a001d72 <__udivmoddi4+0x2be>
1a001c92:	42ab      	cmp	r3, r5
1a001c94:	d96d      	bls.n	1a001d72 <__udivmoddi4+0x2be>
1a001c96:	3802      	subs	r0, #2
1a001c98:	443d      	add	r5, r7
1a001c9a:	1aeb      	subs	r3, r5, r3
1a001c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a001ca0:	e78f      	b.n	1a001bc2 <__udivmoddi4+0x10e>
1a001ca2:	f1c1 0720 	rsb	r7, r1, #32
1a001ca6:	fa22 f807 	lsr.w	r8, r2, r7
1a001caa:	408b      	lsls	r3, r1
1a001cac:	fa05 f401 	lsl.w	r4, r5, r1
1a001cb0:	ea48 0303 	orr.w	r3, r8, r3
1a001cb4:	fa20 fe07 	lsr.w	lr, r0, r7
1a001cb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a001cbc:	40fd      	lsrs	r5, r7
1a001cbe:	ea4e 0e04 	orr.w	lr, lr, r4
1a001cc2:	fbb5 f9fc 	udiv	r9, r5, ip
1a001cc6:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a001cca:	fb0c 5519 	mls	r5, ip, r9, r5
1a001cce:	fa1f f883 	uxth.w	r8, r3
1a001cd2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a001cd6:	fb09 f408 	mul.w	r4, r9, r8
1a001cda:	42ac      	cmp	r4, r5
1a001cdc:	fa02 f201 	lsl.w	r2, r2, r1
1a001ce0:	fa00 fa01 	lsl.w	sl, r0, r1
1a001ce4:	d908      	bls.n	1a001cf8 <__udivmoddi4+0x244>
1a001ce6:	18ed      	adds	r5, r5, r3
1a001ce8:	f109 30ff 	add.w	r0, r9, #4294967295
1a001cec:	d243      	bcs.n	1a001d76 <__udivmoddi4+0x2c2>
1a001cee:	42ac      	cmp	r4, r5
1a001cf0:	d941      	bls.n	1a001d76 <__udivmoddi4+0x2c2>
1a001cf2:	f1a9 0902 	sub.w	r9, r9, #2
1a001cf6:	441d      	add	r5, r3
1a001cf8:	1b2d      	subs	r5, r5, r4
1a001cfa:	fa1f fe8e 	uxth.w	lr, lr
1a001cfe:	fbb5 f0fc 	udiv	r0, r5, ip
1a001d02:	fb0c 5510 	mls	r5, ip, r0, r5
1a001d06:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a001d0a:	fb00 f808 	mul.w	r8, r0, r8
1a001d0e:	45a0      	cmp	r8, r4
1a001d10:	d907      	bls.n	1a001d22 <__udivmoddi4+0x26e>
1a001d12:	18e4      	adds	r4, r4, r3
1a001d14:	f100 35ff 	add.w	r5, r0, #4294967295
1a001d18:	d229      	bcs.n	1a001d6e <__udivmoddi4+0x2ba>
1a001d1a:	45a0      	cmp	r8, r4
1a001d1c:	d927      	bls.n	1a001d6e <__udivmoddi4+0x2ba>
1a001d1e:	3802      	subs	r0, #2
1a001d20:	441c      	add	r4, r3
1a001d22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001d26:	eba4 0408 	sub.w	r4, r4, r8
1a001d2a:	fba0 8902 	umull	r8, r9, r0, r2
1a001d2e:	454c      	cmp	r4, r9
1a001d30:	46c6      	mov	lr, r8
1a001d32:	464d      	mov	r5, r9
1a001d34:	d315      	bcc.n	1a001d62 <__udivmoddi4+0x2ae>
1a001d36:	d012      	beq.n	1a001d5e <__udivmoddi4+0x2aa>
1a001d38:	b156      	cbz	r6, 1a001d50 <__udivmoddi4+0x29c>
1a001d3a:	ebba 030e 	subs.w	r3, sl, lr
1a001d3e:	eb64 0405 	sbc.w	r4, r4, r5
1a001d42:	fa04 f707 	lsl.w	r7, r4, r7
1a001d46:	40cb      	lsrs	r3, r1
1a001d48:	431f      	orrs	r7, r3
1a001d4a:	40cc      	lsrs	r4, r1
1a001d4c:	6037      	str	r7, [r6, #0]
1a001d4e:	6074      	str	r4, [r6, #4]
1a001d50:	2100      	movs	r1, #0
1a001d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d56:	4618      	mov	r0, r3
1a001d58:	e6f8      	b.n	1a001b4c <__udivmoddi4+0x98>
1a001d5a:	4690      	mov	r8, r2
1a001d5c:	e6e0      	b.n	1a001b20 <__udivmoddi4+0x6c>
1a001d5e:	45c2      	cmp	sl, r8
1a001d60:	d2ea      	bcs.n	1a001d38 <__udivmoddi4+0x284>
1a001d62:	ebb8 0e02 	subs.w	lr, r8, r2
1a001d66:	eb69 0503 	sbc.w	r5, r9, r3
1a001d6a:	3801      	subs	r0, #1
1a001d6c:	e7e4      	b.n	1a001d38 <__udivmoddi4+0x284>
1a001d6e:	4628      	mov	r0, r5
1a001d70:	e7d7      	b.n	1a001d22 <__udivmoddi4+0x26e>
1a001d72:	4640      	mov	r0, r8
1a001d74:	e791      	b.n	1a001c9a <__udivmoddi4+0x1e6>
1a001d76:	4681      	mov	r9, r0
1a001d78:	e7be      	b.n	1a001cf8 <__udivmoddi4+0x244>
1a001d7a:	4601      	mov	r1, r0
1a001d7c:	e778      	b.n	1a001c70 <__udivmoddi4+0x1bc>
1a001d7e:	3802      	subs	r0, #2
1a001d80:	443c      	add	r4, r7
1a001d82:	e745      	b.n	1a001c10 <__udivmoddi4+0x15c>
1a001d84:	4608      	mov	r0, r1
1a001d86:	e708      	b.n	1a001b9a <__udivmoddi4+0xe6>
1a001d88:	f1a8 0802 	sub.w	r8, r8, #2
1a001d8c:	443d      	add	r5, r7
1a001d8e:	e72b      	b.n	1a001be8 <__udivmoddi4+0x134>

1a001d90 <__aeabi_idiv0>:
1a001d90:	4770      	bx	lr
1a001d92:	bf00      	nop

1a001d94 <memset>:
1a001d94:	4402      	add	r2, r0
1a001d96:	4603      	mov	r3, r0
1a001d98:	4293      	cmp	r3, r2
1a001d9a:	d100      	bne.n	1a001d9e <memset+0xa>
1a001d9c:	4770      	bx	lr
1a001d9e:	f803 1b01 	strb.w	r1, [r3], #1
1a001da2:	e7f9      	b.n	1a001d98 <memset+0x4>
1a001da4:	08040201 	.word	0x08040201
1a001da8:	0f0f0f03 	.word	0x0f0f0f03
1a001dac:	000000ff 	.word	0x000000ff

1a001db0 <periph_to_base>:
1a001db0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a001dc0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001dd0:	000100e0 01000100 01200003 00060120     .......... . ...
1a001de0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001df0:	01820013 00120182 01a201a2 01c20011     ................
1a001e00:	001001c2 01e201e2 0202000f 000e0202     ................
1a001e10:	02220222 0223000d 001c0223              "."...#.#...

1a001e1c <InitClkStates>:
1a001e1c:	00010100 00010909 0001090a 01010701     ................
1a001e2c:	00010902 00010906 0101090c 0001090d     ................
1a001e3c:	0001090e 0001090f 00010910 00010911     ................
1a001e4c:	00010912 00010913 00011114 00011119     ................
1a001e5c:	0001111a 0001111b                       ........

1a001e64 <UART_BClock>:
1a001e64:	01a201c2 01620182                       ......b.

1a001e6c <UART_PClock>:
1a001e6c:	00820081 00a200a1                       ........

1a001e74 <ExtRateIn>:
1a001e74:	00000000                                ....

1a001e78 <OscRateIn>:
1a001e78:	00b71b00                                ....

1a001e7c <gpioLEDBits>:
1a001e7c:	0b010e00 00050c01 02050105              ............

1a001e88 <InitClkStates>:
1a001e88:	00010308 00010307 01010f01              ............

1a001e94 <pinmuxing>:
1a001e94:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a001ea4:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a001eb4:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a001ec4:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a001ed4:	00f71001 00f31101 00b31201 00f01301     ................
1a001ee4:	00b31401 00b60707 00f20000 00b60100     ................

1a001ef4 <gpioPinsConfig>:
1a001ef4:	02000104 00050701 05010d03 04080100     ................
1a001f04:	02020002 02000304 00000403 04070002     ................
1a001f14:	030c0300 09050402 05040103 04030208     ................
1a001f24:	04020305 06040504 0802000c 03000b06     ................
1a001f34:	00090607 07060503 060f0504 03030004     ................
1a001f44:	02000404 00050404 06040502 04060200     ................
1a001f54:	0c050408 05040a04 0003010e 14010a00     ................
1a001f64:	010f0000 0d000012 00001101 0010010c     ................
1a001f74:	07070300 000f0300 01000001 00000000     ................
1a001f84:	000a0600 08060603 06100504 04030005     ................
1a001f94:	03000106 04090400 04010d05 010b0000     ................
1a001fa4:	0200000f 00000001 00010104 02010800     ................
1a001fb4:	01090000 09010006 05040002 04010200     ................
1a001fc4:	02020105 02020504 0e00000a 01000b02     ................
1a001fd4:	000c020b 00040c01 04000200 01020001     ................
1a001fe4:	02000204 00030402 03070302 070b0300     ................
1a001ff4:	0c030004 03000507 0006070d 01020e03     ................
1a002004:	04010504 06020006 02000504 00040405     ................
1a002014:	08040402 040c0504 0d050409 05040a04     ................
1a002024:	0005010e ffff0801                       ........
